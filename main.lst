     1                                  ;------------------------------------------------------------------------------
     2                                  ; main.asm - содержит главную функцию,
     3                                  ; обеспечивающую простое тестирование
     4                                  ;------------------------------------------------------------------------------
     5                                  ; main.asm
     6                                  
     7                                  global  COMPLEXNUMBER
     8                                  global  COORDINATES
     9                                  global  FRACTION
    10                                  
    11                                  %include "macros.mac"
     1                              <1> ; macros.mac - файл с макроопределениями
     2                              <1> 
     3                              <1> extern  fopen
     4                              <1> extern  fscanf
     5                              <1> extern  fclose
     6                              <1> extern  fprintf
     7                              <1> extern  printf
     8                              <1> extern  stdout
     9                              <1> extern  time
    10                              <1> extern  srand
    11                              <1> extern  strcmp
    12                              <1> extern  atoi
    13                              <1> extern  clock
    14                              <1> extern  CLOCKS_PER_SEC
    15                              <1> 
    16                              <1> extern  InContainer
    17                              <1> extern  InRndContainer
    18                              <1> extern  OutContainer
    19                              <1> extern  BubbleSortContainer
    20                              <1> extern  PerimeterSumContainer
    21                              <1> extern  BubbleSortContainer2
    22                              <1> ;-------------------------------------------------------------
    23                              <1> ; Вывод строки символов из буфера
    24                              <1> %macro	PrintStrBuf 2
    25                              <1>         mov rdi, %2
    26                              <1>         mov rsi, %1
    27                              <1>         xor rax, rax
    28                              <1>         call fprintf
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> ;-------------------------------------------------------------
    32                              <1> ; Вывод строки, передаваемой непосредственно макросу
    33                              <1> %macro  PrintStr    2
    34                              <1>     section .data
    35                              <1>         %%arg1  db  %1,0        ; first argument
    36                              <1>     section .text               ; the printf arguments
    37                              <1>         mov rdi, %2
    38                              <1>         mov rsi, %%arg1
    39                              <1>         mov rax, 0              ; no floating point
    40                              <1>         call fprintf
    41                              <1> %endmacro
    42                              <1> 
    43                              <1> ;-------------------------------------------------------------
    44                              <1> ; Вывод строки, передаваемой непосредственно макросу
    45                              <1> ; с переводом на следующую строку
    46                              <1> %macro  PrintStrLn    2
    47                              <1>     section .data
    48                              <1>         %%arg1  db  %1,10,0     ; first argument
    49                              <1>     section .text               ; the printf arguments
    50                              <1>         mov rdi, %2
    51                              <1>         mov rsi, %%arg1
    52                              <1>         mov rax, 0              ; no floating point
    53                              <1>         call fprintf
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> ;-------------------------------------------------------------
    57                              <1> ; Вывод целого числа
    58                              <1> %macro  PrintInt    2
    59                              <1>     section .data
    60                              <1>         %%arg1  db  "%d",0     ; first argument
    61                              <1>     section .text               ; the printf arguments
    62                              <1>         mov rdi, %2
    63                              <1>         mov rsi, %%arg1
    64                              <1>         mov rdx, %1
    65                              <1>         mov rax, 0              ; no floating point
    66                              <1>         call fprintf
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> ;-------------------------------------------------------------
    70                              <1> ; Вывод 64-разрядного беззнакового целого числа
    71                              <1> %macro  PrintLLUns    2
    72                              <1>     section .data
    73                              <1>         %%arg1  db  "%llu",0     ; first argument
    74                              <1>     section .text               ; the printf arguments
    75                              <1>         mov rdi, %2
    76                              <1>         mov rsi, %%arg1
    77                              <1>         mov rdx, %1
    78                              <1>         mov rax, 0              ; no floating point
    79                              <1>         call fprintf
    80                              <1> %endmacro
    81                              <1> 
    82                              <1> ;-------------------------------------------------------------
    83                              <1> ; Вывод действительного числа двойной точности
    84                              <1> %macro  PrintDouble    2
    85                              <1>     section .data
    86                              <1>         %%arg1  db  "%g",0     ; first argument
    87                              <1>     section .text               ; the printf arguments
    88                              <1>         mov rdi, %2
    89                              <1>         mov rsi, %%arg1
    90                              <1>         movsd xmm0, %1
    91                              <1>         mov rax, 1              ; no floating point
    92                              <1>         call fprintf
    93                              <1> %endmacro
    94                              <1> 
    95                              <1> ;-------------------------------------------------------------
    96                              <1> ; Вывод содержимого контейнера
    97                              <1> %macro  PrintContainer    3
    98                              <1>     mov     rdi, %1
    99                              <1>     mov     esi, %2
   100                              <1>     mov     rdx, %3
   101                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   102                              <1>     call    OutContainer
   103                              <1> %endmacro
   104                              <1> 
   105                              <1> ;-------------------------------------------------------------
   106                              <1> ; Сортировка контейнера
   107                              <1> %macro  SortContainer    3
   108                              <1>     mov     rdi, %1
   109                              <1>     mov     esi, %2
   110                              <1>     mov     rdx, %3
   111                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   112                              <1>     call    BubbleSortContainer
   113                              <1> %endmacro
   114                              <1> 
   115                              <1> 
   116                              <1> ;-------------------------------------------------------------
   117                              <1> ; Сортировка контейнера
   118                              <1> %macro  SortContainer2    4
   119                              <1>     mov     rdi, %1
   120                              <1>     mov     esi, %2
   121                              <1>     mov     rdx, %3
   122                              <1>     mov     rsi, %2
   123                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   124                              <1>     call    BubbleSortContainer2
   125                              <1> %endmacro
   126                              <1> 
   127                              <1> 
   128                              <1> ;-------------------------------------------------------------
   129                              <1> ; Вычисление суммы периметров фигур в контейнере
   130                              <1> %macro  ContainerSum    3
   131                              <1>     mov     rdi, %1
   132                              <1>     mov     rsi, %2
   133                              <1>     call    PerimeterSumContainer
   134                              <1>     movsd   %3, xmm0
   135                              <1> %endmacro
   136                              <1> 
   137                              <1> ;-------------------------------------------------------------
   138                              <1> ; Открытие файла для чтения, записи
   139                              <1> %macro  FileOpen   3
   140                              <1>     section .data
   141                              <1>         %%rw  db  %2,0          ; признак доступа
   142                              <1>     section .text               ; the printf arguments
   143                              <1>         mov     rdi, %1         ; адрес строки открываемого файла
   144                              <1>         lea     rsi, [%%rw]       ; строка определяющая чтение-запись. Задается явно
   145                              <1>         mov     rax, 0          ; нет чисел с плавающей точкой
   146                              <1>         call    fopen
   147                              <1>         mov     [%3], rax
   148                              <1> %endmacro
   149                              <1> 
   150                              <1> ;-------------------------------------------------------------
   151                              <1> ; Закрытие открытого файла
   152                              <1> %macro  FileClose   1
   153                              <1>     mov     rdi, %1             ; передача указателя на закрываемый файл
   154                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   155                              <1>     call    fclose
   156                              <1> %endmacro
   157                              <1> 
    12                                  
    13                                  section .data
    14 00000000 01000000                    COMPLEXNUMBER   dd  1
    15 00000004 02000000                    COORDINATES    dd  2
    16 00000008 03000000                    FRACTION    dd  3
    17 0000000C 000000000000F03F            oneDouble   dq  1.0
    18 00000014 496E636F7272656374-         erMsg1  db "Incorrect number of arguments = %d: ",10,0
    18 0000001D 206E756D626572206F-
    18 00000026 6620617267756D656E-
    18 0000002F 7473203D2025643A20-
    18 00000038 0A00               
    19 0000003A 2D6E00                      rndGen  db "-n",0
    20 0000003D 2D6600                      fileGen  db "-f",0
    21 00000040 696E636F7272656374-         errMessage1 db  "incorrect command line!", 10,"  Waited:",10
    21 00000049 20636F6D6D616E6420-
    21 00000052 6C696E65210A202057-
    21 0000005B 61697465643A0A     
    22 00000062 2020202020636F6D6D-                     db  "     command -f infile outfile01 outfile02",10,"  Or:",10
    22 0000006B 616E64202D6620696E-
    22 00000074 66696C65206F757466-
    22 0000007D 696C653031206F7574-
    22 00000086 66696C6530320A2020-
    22 0000008F 4F723A0A           
    23 00000093 2020202020636F6D6D-                     db  "     command -n number outfile01 outfile02",10,0
    23 0000009C 616E64202D6E206E75-
    23 000000A5 6D626572206F757466-
    23 000000AE 696C653031206F7574-
    23 000000B7 66696C6530320A00   
    24 000000BF 696E636F7272656374-         errMessage2 db  "incorrect qualifier value!", 10,"  Waited:",10
    24 000000C8 207175616C69666965-
    24 000000D1 722076616C7565210A-
    24 000000DA 20205761697465643A-
    24 000000E3 0A                 
    25 000000E4 2020202020636F6D6D-                     db  "     command -f infile outfile01 outfile02",10,"  Or:",10
    25 000000ED 616E64202D6620696E-
    25 000000F6 66696C65206F757466-
    25 000000FF 696C653031206F7574-
    25 00000108 66696C6530320A2020-
    25 00000111 4F723A0A           
    26 00000115 2020202020636F6D6D-                     db  "     command -n number outfile01 outfile02",10,0
    26 0000011E 616E64202D6E206E75-
    26 00000127 6D626572206F757466-
    26 00000130 696C653031206F7574-
    26 00000139 66696C6530320A00   
    27 00000141 00000000                    len         dd  0           ; Количество элементов в массиве
    28                                  section .bss
    29 00000000 <res 00000004>              argc        resd    1
    30 00000004 <res 00000004>              num         resd    1
    31 00000008 <res 00000008>              sum         resq    1
    32 00000010 <res 00000008>              start       resq    1       ; начало отсчета времени
    33 00000018 <res 00000008>              delta       resq    1       ; интервал отсчета времени
    34 00000020 <res 00000010>              startTime   resq    2       ; начало отсчета времени
    35 00000030 <res 00000010>              endTime     resq    2       ; конец отсчета времени
    36 00000040 <res 00000010>              deltaTime   resq    2       ; интервал отсчета времени
    37 00000050 <res 00000008>              ifst        resq    1       ; указатель на файл, открываемый файл для чтения фигур
    38 00000058 <res 00000008>              ofst1       resq    1       ; указатель на файл, открываемый файл для записи контейнера
    39 00000060 <res 00000008>              ofst2       resq    1       ; указатель на файл, открываемый файл для записи периметра
    40 00000068 <res 00027100>              cont        resb    160000  ; Массив используемый для хранения данных
    41                                  
    42                                  section .text
    43                                      global main
    44                                  main:
    45 00000000 55                      push rbp
    46 00000001 4889E5                  mov rbp,rsp
    47                                  
    48 00000004 893C25[00000000]            mov dword [argc], edi ;rdi contains number of arguments
    49 0000000B 4989FC                      mov r12, rdi ;rdi contains number of arguments
    50 0000000E 4989F5                      mov r13, rsi ;rsi contains the address to the array of arguments
    51                                  
    52                                  .printArguments:
    53                                      PrintStrLn "The command and arguments:", [stdout]
    53                              <1>  section .data
    53 00000145 54686520636F6D6D61- <1>  %%arg1 db %1,10,0
    53 0000014E 6E6420616E64206172- <1>
    53 00000157 67756D656E74733A0A- <1>
    53 00000160 00                  <1>
    53                              <1>  section .text
    53 00000011 488B3C25[00000000]  <1>  mov rdi, %2
    53 00000019 48BE-               <1>  mov rsi, %%arg1
    53 0000001B [4501000000000000]  <1>
    53 00000023 B800000000          <1>  mov rax, 0
    53 00000028 E8(00000000)        <1>  call fprintf
    54 0000002D BB00000000                  mov rbx, 0
    55                                  .printLoop:
    56                                      PrintStrBuf qword [r13+rbx*8], [stdout]
    56 00000032 488B3C25[00000000]  <1>  mov rdi, %2
    56 0000003A 498B74DD00          <1>  mov rsi, %1
    56 0000003F 4831C0              <1>  xor rax, rax
    56 00000042 E8(00000000)        <1>  call fprintf
    57                                      PrintStr    10, [stdout]
    57                              <1>  section .data
    57 00000161 0A00                <1>  %%arg1 db %1,0
    57                              <1>  section .text
    57 00000047 488B3C25[00000000]  <1>  mov rdi, %2
    57 0000004F 48BE-               <1>  mov rsi, %%arg1
    57 00000051 [6101000000000000]  <1>
    57 00000059 B800000000          <1>  mov rax, 0
    57 0000005E E8(00000000)        <1>  call fprintf
    58 00000063 48FFC3                      inc rbx
    59 00000066 4C39E3                      cmp rbx, r12
    60 00000069 7CC7                        jl .printLoop
    61                                  
    62 0000006B 4983FC05                    cmp r12, 5      ; проверка количества аргументов
    63 0000006F 741F                        je .next1
    64                                      PrintStrBuf errMessage1, [stdout]
    64 00000071 488B3C25[00000000]  <1>  mov rdi, %2
    64 00000079 48BE-               <1>  mov rsi, %1
    64 0000007B [4000000000000000]  <1>
    64 00000083 4831C0              <1>  xor rax, rax
    64 00000086 E8(00000000)        <1>  call fprintf
    65 0000008B E9BD050000                  jmp .return
    66                                  .next1:
    67                                      PrintStrLn "Start", [stdout]
    67                              <1>  section .data
    67 00000163 53746172740A00      <1>  %%arg1 db %1,10,0
    67                              <1>  section .text
    67 00000090 488B3C25[00000000]  <1>  mov rdi, %2
    67 00000098 48BE-               <1>  mov rsi, %%arg1
    67 0000009A [6301000000000000]  <1>
    67 000000A2 B800000000          <1>  mov rax, 0
    67 000000A7 E8(00000000)        <1>  call fprintf
    68                                      ; Проверка второго аргумента
    69 000000AC 48BF-                       mov rdi, rndGen
    69 000000AE [3A00000000000000] 
    70 000000B6 498B7508                    mov rsi, [r13+8]    ; второй аргумент командной строки
    71 000000BA E8(00000000)                call strcmp
    72 000000BF 4883F800                    cmp rax, 0          ; строки равны "-n"
    73 000000C3 743C                        je .next2
    74 000000C5 48BF-                       mov rdi, fileGen
    74 000000C7 [3D00000000000000] 
    75 000000CF 498B7508                    mov rsi, [r13+8]    ; второй аргумент командной строки
    76 000000D3 E8(00000000)                call strcmp
    77 000000D8 4883F800                    cmp rax, 0          ; строки равны "-f"
    78 000000DC 0F84C2000000                je .next3
    79                                      PrintStrBuf errMessage2, [stdout]
    79 000000E2 488B3C25[00000000]  <1>  mov rdi, %2
    79 000000EA 48BE-               <1>  mov rsi, %1
    79 000000EC [BF00000000000000]  <1>
    79 000000F4 4831C0              <1>  xor rax, rax
    79 000000F7 E8(00000000)        <1>  call fprintf
    80 000000FC E94C050000                  jmp .return
    81                                  .next2:
    82                                      ; Генерация случайных фигур
    83 00000101 498B7D10                    mov rdi, [r13+16]
    84 00000105 E8(00000000)                call atoi
    85 0000010A 890425[04000000]            mov [num], eax
    86                                      PrintInt [num], [stdout]
    86                              <1>  section .data
    86 0000016A 256400              <1>  %%arg1 db "%d",0
    86                              <1>  section .text
    86 00000111 488B3C25[00000000]  <1>  mov rdi, %2
    86 00000119 48BE-               <1>  mov rsi, %%arg1
    86 0000011B [6A01000000000000]  <1>
    86 00000123 488B1425[04000000]  <1>  mov rdx, %1
    86 0000012B B800000000          <1>  mov rax, 0
    86 00000130 E8(00000000)        <1>  call fprintf
    87                                      PrintStrLn "", [stdout]
    87                              <1>  section .data
    87 0000016D 0A00                <1>  %%arg1 db %1,10,0
    87                              <1>  section .text
    87 00000135 488B3C25[00000000]  <1>  mov rdi, %2
    87 0000013D 48BE-               <1>  mov rsi, %%arg1
    87 0000013F [6D01000000000000]  <1>
    87 00000147 B800000000          <1>  mov rax, 0
    87 0000014C E8(00000000)        <1>  call fprintf
    88 00000151 8B0425[04000000]            mov eax, [num]
    89 00000158 83F801                      cmp eax, 1
    90 0000015B 0F8C90040000                jl .fall1
    91 00000161 3D10270000                  cmp eax, 10000
    92 00000166 0F8F85040000                jg .fall1
    93                                      ; Начальная установка генератора случайных чисел
    94 0000016C 4831FF                      xor     rdi, rdi
    95 0000016F 4831C0                      xor     rax, rax
    96 00000172 E8(00000000)                call    time
    97 00000177 4889C7                      mov     rdi, rax
    98 0000017A 4831C0                      xor     rax, rax
    99 0000017D E8(00000000)                call    srand
   100                                      ; Заполнение контейнера случайными фигурами
   101 00000182 48BF-                       mov     rdi, cont   ; передача адреса контейнера
   101 00000184 [6800000000000000] 
   102 0000018C 48BE-                       mov     rsi, len    ; передача адреса для длины
   102 0000018E [4101000000000000] 
   103 00000196 8B1425[04000000]            mov     edx, [num]  ; передача количества порождаемых фигур
   104 0000019D E8(00000000)                call    InRndContainer
   105 000001A2 EB54                        jmp .task2
   106                                  
   107                                  .next3:
   108                                      ; Получение фигур из файла
   109                                      FileOpen [r13+16], "r", ifst
   109                              <1>  section .data
   109 0000016F 7200                <1>  %%rw db %2,0
   109                              <1>  section .text
   109 000001A4 498B7D10            <1>  mov rdi, %1
   109 000001A8 488D3425[6F010000]  <1>  lea rsi, [%%rw]
   109 000001B0 B800000000          <1>  mov rax, 0
   109 000001B5 E8(00000000)        <1>  call fopen
   109 000001BA 48890425[50000000]  <1>  mov [%3], rax
   110                                      ; Заполнение контейнера фигурами из файла
   111 000001C2 48BF-                       mov     rdi, cont           ; адрес контейнера
   111 000001C4 [6800000000000000] 
   112 000001CC 48BE-                       mov     rsi, len            ; адрес для установки числа элементов
   112 000001CE [4101000000000000] 
   113 000001D6 488B1425[50000000]          mov     rdx, [ifst]         ; указатель на файл
   114 000001DE 4831C0                      xor     rax, rax
   115 000001E1 E8(00000000)                call    InContainer         ; ввод данных в контейнер
   116                                      FileClose [ifst]
   116 000001E6 488B3C25[50000000]  <1>  mov rdi, %1
   116 000001EE B800000000          <1>  mov rax, 0
   116 000001F3 E8(00000000)        <1>  call fclose
   117                                  
   118                                  .task2:
   119                                      ; Вывод содержимого контейнера
   120                                      
   121                                      PrintStrLn "Filled container:", [stdout]
   121                              <1>  section .data
   121 00000171 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   121 0000017A 6E7461696E65723A0A- <1>
   121 00000183 00                  <1>
   121                              <1>  section .text
   121 000001F8 488B3C25[00000000]  <1>  mov rdi, %2
   121 00000200 48BE-               <1>  mov rsi, %%arg1
   121 00000202 [7101000000000000]  <1>
   121 0000020A B800000000          <1>  mov rax, 0
   121 0000020F E8(00000000)        <1>  call fprintf
   122                                      PrintContainer cont, [len], [stdout]
   122 00000214 48BF-               <1>  mov rdi, %1
   122 00000216 [6800000000000000]  <1>
   122 0000021E 8B3425[41010000]    <1>  mov esi, %2
   122 00000225 488B1425[00000000]  <1>  mov rdx, %3
   122 0000022D B800000000          <1>  mov rax, 0
   122 00000232 E8(00000000)        <1>  call OutContainer
   123                                  
   124                                      SortContainer cont, [len], [stdout]
   124 00000237 48BF-               <1>  mov rdi, %1
   124 00000239 [6800000000000000]  <1>
   124 00000241 8B3425[41010000]    <1>  mov esi, %2
   124 00000248 488B1425[00000000]  <1>  mov rdx, %3
   124 00000250 B800000000          <1>  mov rax, 0
   124 00000255 E8(00000000)        <1>  call BubbleSortContainer
   125                                      
   126                                      PrintStrLn "Filled container:", [stdout]
   126                              <1>  section .data
   126 00000184 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   126 0000018D 6E7461696E65723A0A- <1>
   126 00000196 00                  <1>
   126                              <1>  section .text
   126 0000025A 488B3C25[00000000]  <1>  mov rdi, %2
   126 00000262 48BE-               <1>  mov rsi, %%arg1
   126 00000264 [8401000000000000]  <1>
   126 0000026C B800000000          <1>  mov rax, 0
   126 00000271 E8(00000000)        <1>  call fprintf
   127                                      PrintContainer cont, [len], [stdout]
   127 00000276 48BF-               <1>  mov rdi, %1
   127 00000278 [6800000000000000]  <1>
   127 00000280 8B3425[41010000]    <1>  mov esi, %2
   127 00000287 488B1425[00000000]  <1>  mov rdx, %3
   127 0000028F B800000000          <1>  mov rax, 0
   127 00000294 E8(00000000)        <1>  call OutContainer
   128                                      
   129                                      FileOpen [r13+24], "w", ofst1
   129                              <1>  section .data
   129 00000197 7700                <1>  %%rw db %2,0
   129                              <1>  section .text
   129 00000299 498B7D18            <1>  mov rdi, %1
   129 0000029D 488D3425[97010000]  <1>  lea rsi, [%%rw]
   129 000002A5 B800000000          <1>  mov rax, 0
   129 000002AA E8(00000000)        <1>  call fopen
   129 000002AF 48890425[58000000]  <1>  mov [%3], rax
   130                                      PrintStrLn "Filled container:", [ofst1]
   130                              <1>  section .data
   130 00000199 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   130 000001A2 6E7461696E65723A0A- <1>
   130 000001AB 00                  <1>
   130                              <1>  section .text
   130 000002B7 488B3C25[58000000]  <1>  mov rdi, %2
   130 000002BF 48BE-               <1>  mov rsi, %%arg1
   130 000002C1 [9901000000000000]  <1>
   130 000002C9 B800000000          <1>  mov rax, 0
   130 000002CE E8(00000000)        <1>  call fprintf
   131                                      PrintContainer cont, [len], [ofst1]
   131 000002D3 48BF-               <1>  mov rdi, %1
   131 000002D5 [6800000000000000]  <1>
   131 000002DD 8B3425[41010000]    <1>  mov esi, %2
   131 000002E4 488B1425[58000000]  <1>  mov rdx, %3
   131 000002EC B800000000          <1>  mov rax, 0
   131 000002F1 E8(00000000)        <1>  call OutContainer
   132                                      FileClose [ofst1]
   132 000002F6 488B3C25[58000000]  <1>  mov rdi, %1
   132 000002FE B800000000          <1>  mov rax, 0
   132 00000303 E8(00000000)        <1>  call fclose
   133                                  
   134                                      ; Вычисление времени старта
   135 00000308 B8E4000000                  mov rax, 228   ; 228 is system call for sys_clock_gettime
   136 0000030D 31FF                        xor edi, edi   ; 0 for system clock (preferred over "mov rdi, 0")
   137 0000030F 488D3425[20000000]          lea rsi, [startTime]
   138 00000317 0F05                        syscall        ; [time] contains number of seconds
   139                                                     ; [time + 8] contains number of nanoseconds
   140                                  
   141                                      
   142                                      ContainerSum cont, [len], [sum]
   142 00000319 48BF-               <1>  mov rdi, %1
   142 0000031B [6800000000000000]  <1>
   142 00000323 488B3425[41010000]  <1>  mov rsi, %2
   142 0000032B E8(00000000)        <1>  call PerimeterSumContainer
   142 00000330 F20F110425-         <1>  movsd %3, xmm0
   142 00000335 [08000000]          <1>
   143                                      PrintDouble xmm0, [stdout]
   143                              <1>  section .data
   143 000001AC 256700              <1>  %%arg1 db "%g",0
   143                              <1>  section .text
   143 00000339 488B3C25[00000000]  <1>  mov rdi, %2
   143 00000341 48BE-               <1>  mov rsi, %%arg1
   143 00000343 [AC01000000000000]  <1>
   143 0000034B F20F10C0            <1>  movsd xmm0, %1
   143 0000034F B801000000          <1>  mov rax, 1
   143 00000354 E8(00000000)        <1>  call fprintf
   144                                      ; Вычисление времени завершения
   145 00000359 B8E4000000                  mov rax, 228   ; 228 is system call for sys_clock_gettime
   146 0000035E 31FF                        xor edi, edi   ; 0 for system clock (preferred over "mov rdi, 0")
   147 00000360 488D3425[30000000]          lea rsi, [endTime]
   148 00000368 0F05                        syscall        ; [time] contains number of seconds
   149                                                     ; [time + 8] contains number of nanoseconds
   150                                  
   151                                      ; Получение времени работы
   152 0000036A 488B0425[30000000]          mov rax, [endTime]
   153 00000372 482B0425[20000000]          sub rax, [startTime]
   154 0000037A 488B1C25[38000000]          mov rbx, [endTime+8]
   155 00000382 488B0C25[28000000]          mov rcx, [startTime+8]
   156 0000038A 4839CB                      cmp rbx, rcx
   157 0000038D 7D0A                        jge .subNanoOnly
   158                                      ; иначе занимаем секунду
   159 0000038F 48FFC8                      dec rax
   160 00000392 4881C300CA9A3B              add rbx, 1000000000
   161                                  .subNanoOnly:
   162 00000399 482B1C25[28000000]          sub rbx, [startTime+8]
   163 000003A1 48890425[40000000]          mov [deltaTime], rax
   164 000003A9 48891C25[48000000]          mov [deltaTime+8], rbx
   165                                  
   166                                      ; Вывод периметра нескольких фигур
   167                                      PrintStr "Perimeter sum = ", [stdout]
   167                              <1>  section .data
   167 000001AF 506572696D65746572- <1>  %%arg1 db %1,0
   167 000001B8 2073756D203D2000    <1>
   167                              <1>  section .text
   167 000003B1 488B3C25[00000000]  <1>  mov rdi, %2
   167 000003B9 48BE-               <1>  mov rsi, %%arg1
   167 000003BB [AF01000000000000]  <1>
   167 000003C3 B800000000          <1>  mov rax, 0
   167 000003C8 E8(00000000)        <1>  call fprintf
   168                                      PrintDouble [sum], [stdout]
   168                              <1>  section .data
   168 000001C0 256700              <1>  %%arg1 db "%g",0
   168                              <1>  section .text
   168 000003CD 488B3C25[00000000]  <1>  mov rdi, %2
   168 000003D5 48BE-               <1>  mov rsi, %%arg1
   168 000003D7 [C001000000000000]  <1>
   168 000003DF F20F100425-         <1>  movsd xmm0, %1
   168 000003E4 [08000000]          <1>
   168 000003E8 B801000000          <1>  mov rax, 1
   168 000003ED E8(00000000)        <1>  call fprintf
   169                                      PrintStr ". Calculaton time = ", [stdout]
   169                              <1>  section .data
   169 000001C3 2E2043616C63756C61- <1>  %%arg1 db %1,0
   169 000001CC 746F6E2074696D6520- <1>
   169 000001D5 3D2000              <1>
   169                              <1>  section .text
   169 000003F2 488B3C25[00000000]  <1>  mov rdi, %2
   169 000003FA 48BE-               <1>  mov rsi, %%arg1
   169 000003FC [C301000000000000]  <1>
   169 00000404 B800000000          <1>  mov rax, 0
   169 00000409 E8(00000000)        <1>  call fprintf
   170                                      PrintLLUns [deltaTime], [stdout]
   170                              <1>  section .data
   170 000001D8 256C6C7500          <1>  %%arg1 db "%llu",0
   170                              <1>  section .text
   170 0000040E 488B3C25[00000000]  <1>  mov rdi, %2
   170 00000416 48BE-               <1>  mov rsi, %%arg1
   170 00000418 [D801000000000000]  <1>
   170 00000420 488B1425[40000000]  <1>  mov rdx, %1
   170 00000428 B800000000          <1>  mov rax, 0
   170 0000042D E8(00000000)        <1>  call fprintf
   171                                      PrintStr " sec, ", [stdout]
   171                              <1>  section .data
   171 000001DD 207365632C2000      <1>  %%arg1 db %1,0
   171                              <1>  section .text
   171 00000432 488B3C25[00000000]  <1>  mov rdi, %2
   171 0000043A 48BE-               <1>  mov rsi, %%arg1
   171 0000043C [DD01000000000000]  <1>
   171 00000444 B800000000          <1>  mov rax, 0
   171 00000449 E8(00000000)        <1>  call fprintf
   172                                      PrintLLUns [deltaTime+8], [stdout]
   172                              <1>  section .data
   172 000001E4 256C6C7500          <1>  %%arg1 db "%llu",0
   172                              <1>  section .text
   172 0000044E 488B3C25[00000000]  <1>  mov rdi, %2
   172 00000456 48BE-               <1>  mov rsi, %%arg1
   172 00000458 [E401000000000000]  <1>
   172 00000460 488B1425[48000000]  <1>  mov rdx, %1
   172 00000468 B800000000          <1>  mov rax, 0
   172 0000046D E8(00000000)        <1>  call fprintf
   173                                      PrintStr " nsec", [stdout]
   173                              <1>  section .data
   173 000001E9 206E73656300        <1>  %%arg1 db %1,0
   173                              <1>  section .text
   173 00000472 488B3C25[00000000]  <1>  mov rdi, %2
   173 0000047A 48BE-               <1>  mov rsi, %%arg1
   173 0000047C [E901000000000000]  <1>
   173 00000484 B800000000          <1>  mov rax, 0
   173 00000489 E8(00000000)        <1>  call fprintf
   174                                      PrintStr 10, [stdout]
   174                              <1>  section .data
   174 000001EF 0A00                <1>  %%arg1 db %1,0
   174                              <1>  section .text
   174 0000048E 488B3C25[00000000]  <1>  mov rdi, %2
   174 00000496 48BE-               <1>  mov rsi, %%arg1
   174 00000498 [EF01000000000000]  <1>
   174 000004A0 B800000000          <1>  mov rax, 0
   174 000004A5 E8(00000000)        <1>  call fprintf
   175                                  
   176                                      FileOpen [r13+32], "w", ofst2
   176                              <1>  section .data
   176 000001F1 7700                <1>  %%rw db %2,0
   176                              <1>  section .text
   176 000004AA 498B7D20            <1>  mov rdi, %1
   176 000004AE 488D3425[F1010000]  <1>  lea rsi, [%%rw]
   176 000004B6 B800000000          <1>  mov rax, 0
   176 000004BB E8(00000000)        <1>  call fopen
   176 000004C0 48890425[60000000]  <1>  mov [%3], rax
   177                                      PrintStr  "Perimeter sum = ", [ofst2]
   177                              <1>  section .data
   177 000001F3 506572696D65746572- <1>  %%arg1 db %1,0
   177 000001FC 2073756D203D2000    <1>
   177                              <1>  section .text
   177 000004C8 488B3C25[60000000]  <1>  mov rdi, %2
   177 000004D0 48BE-               <1>  mov rsi, %%arg1
   177 000004D2 [F301000000000000]  <1>
   177 000004DA B800000000          <1>  mov rax, 0
   177 000004DF E8(00000000)        <1>  call fprintf
   178                                      PrintDouble [sum], [ofst2]
   178                              <1>  section .data
   178 00000204 256700              <1>  %%arg1 db "%g",0
   178                              <1>  section .text
   178 000004E4 488B3C25[60000000]  <1>  mov rdi, %2
   178 000004EC 48BE-               <1>  mov rsi, %%arg1
   178 000004EE [0402000000000000]  <1>
   178 000004F6 F20F100425-         <1>  movsd xmm0, %1
   178 000004FB [08000000]          <1>
   178 000004FF B801000000          <1>  mov rax, 1
   178 00000504 E8(00000000)        <1>  call fprintf
   179                                      PrintStr ". Calculaton time = ", [ofst2]
   179                              <1>  section .data
   179 00000207 2E2043616C63756C61- <1>  %%arg1 db %1,0
   179 00000210 746F6E2074696D6520- <1>
   179 00000219 3D2000              <1>
   179                              <1>  section .text
   179 00000509 488B3C25[60000000]  <1>  mov rdi, %2
   179 00000511 48BE-               <1>  mov rsi, %%arg1
   179 00000513 [0702000000000000]  <1>
   179 0000051B B800000000          <1>  mov rax, 0
   179 00000520 E8(00000000)        <1>  call fprintf
   180                                      PrintLLUns [deltaTime], [ofst2]
   180                              <1>  section .data
   180 0000021C 256C6C7500          <1>  %%arg1 db "%llu",0
   180                              <1>  section .text
   180 00000525 488B3C25[60000000]  <1>  mov rdi, %2
   180 0000052D 48BE-               <1>  mov rsi, %%arg1
   180 0000052F [1C02000000000000]  <1>
   180 00000537 488B1425[40000000]  <1>  mov rdx, %1
   180 0000053F B800000000          <1>  mov rax, 0
   180 00000544 E8(00000000)        <1>  call fprintf
   181                                      PrintStr " sec, ", [ofst2]
   181                              <1>  section .data
   181 00000221 207365632C2000      <1>  %%arg1 db %1,0
   181                              <1>  section .text
   181 00000549 488B3C25[60000000]  <1>  mov rdi, %2
   181 00000551 48BE-               <1>  mov rsi, %%arg1
   181 00000553 [2102000000000000]  <1>
   181 0000055B B800000000          <1>  mov rax, 0
   181 00000560 E8(00000000)        <1>  call fprintf
   182                                      PrintLLUns [deltaTime+8], [ofst2]
   182                              <1>  section .data
   182 00000228 256C6C7500          <1>  %%arg1 db "%llu",0
   182                              <1>  section .text
   182 00000565 488B3C25[60000000]  <1>  mov rdi, %2
   182 0000056D 48BE-               <1>  mov rsi, %%arg1
   182 0000056F [2802000000000000]  <1>
   182 00000577 488B1425[48000000]  <1>  mov rdx, %1
   182 0000057F B800000000          <1>  mov rax, 0
   182 00000584 E8(00000000)        <1>  call fprintf
   183                                      PrintStr " nsec", [ofst2]
   183                              <1>  section .data
   183 0000022D 206E73656300        <1>  %%arg1 db %1,0
   183                              <1>  section .text
   183 00000589 488B3C25[60000000]  <1>  mov rdi, %2
   183 00000591 48BE-               <1>  mov rsi, %%arg1
   183 00000593 [2D02000000000000]  <1>
   183 0000059B B800000000          <1>  mov rax, 0
   183 000005A0 E8(00000000)        <1>  call fprintf
   184                                      PrintStr 10, [ofst2]
   184                              <1>  section .data
   184 00000233 0A00                <1>  %%arg1 db %1,0
   184                              <1>  section .text
   184 000005A5 488B3C25[60000000]  <1>  mov rdi, %2
   184 000005AD 48BE-               <1>  mov rsi, %%arg1
   184 000005AF [3302000000000000]  <1>
   184 000005B7 B800000000          <1>  mov rax, 0
   184 000005BC E8(00000000)        <1>  call fprintf
   185                                      FileClose [ofst2]
   185 000005C1 488B3C25[60000000]  <1>  mov rdi, %1
   185 000005C9 B800000000          <1>  mov rax, 0
   185 000005CE E8(00000000)        <1>  call fclose
   186                                  
   187                                      PrintStrLn "Stop", [stdout]
   187                              <1>  section .data
   187 00000235 53746F700A00        <1>  %%arg1 db %1,10,0
   187                              <1>  section .text
   187 000005D3 488B3C25[00000000]  <1>  mov rdi, %2
   187 000005DB 48BE-               <1>  mov rsi, %%arg1
   187 000005DD [3502000000000000]  <1>
   187 000005E5 B800000000          <1>  mov rax, 0
   187 000005EA E8(00000000)        <1>  call fprintf
   188 000005EF EB5C                        jmp .return
   189                                  .fall1:
   190                                      PrintStr "incorrect numer of figures = ", [stdout]
   190                              <1>  section .data
   190 0000023B 696E636F7272656374- <1>  %%arg1 db %1,0
   190 00000244 206E756D6572206F66- <1>
   190 0000024D 206669677572657320- <1>
   190 00000256 3D2000              <1>
   190                              <1>  section .text
   190 000005F1 488B3C25[00000000]  <1>  mov rdi, %2
   190 000005F9 48BE-               <1>  mov rsi, %%arg1
   190 000005FB [3B02000000000000]  <1>
   190 00000603 B800000000          <1>  mov rax, 0
   190 00000608 E8(00000000)        <1>  call fprintf
   191                                      PrintInt [num], [stdout]
   191                              <1>  section .data
   191 00000259 256400              <1>  %%arg1 db "%d",0
   191                              <1>  section .text
   191 0000060D 488B3C25[00000000]  <1>  mov rdi, %2
   191 00000615 48BE-               <1>  mov rsi, %%arg1
   191 00000617 [5902000000000000]  <1>
   191 0000061F 488B1425[04000000]  <1>  mov rdx, %1
   191 00000627 B800000000          <1>  mov rax, 0
   191 0000062C E8(00000000)        <1>  call fprintf
   192                                      PrintStrLn ". Set 0 < number <= 10000", [stdout]
   192                              <1>  section .data
   192 0000025C 2E205365742030203C- <1>  %%arg1 db %1,10,0
   192 00000265 206E756D626572203C- <1>
   192 0000026E 3D2031303030300A00  <1>
   192                              <1>  section .text
   192 00000631 488B3C25[00000000]  <1>  mov rdi, %2
   192 00000639 48BE-               <1>  mov rsi, %%arg1
   192 0000063B [5C02000000000000]  <1>
   192 00000643 B800000000          <1>  mov rax, 0
   192 00000648 E8(00000000)        <1>  call fprintf
   193                                  .return:
   194 0000064D C9                      leave
   195 0000064E C3                      ret
