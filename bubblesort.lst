     1                                  extern ToRealNumber
     2                                  extern stdout
     3                                  extern OutNumber
     4                                  extern OutComplexNumber
     5                                  extern ToRealComplexNumber
     6                                  %include "printmacros.mac"
     1                              <1> extern  fprintf
     2                              <1> extern  OutContainer
     3                              <1> 
     4                              <1> ;-------------------------------------------------------------
     5                              <1> ; Вывод строки, передаваемой непосредственно макросу
     6                              <1> ; с переводом на следующую строку
     7                              <1> %macro  PrintStr2    2
     8                              <1>     section .data
     9                              <1>         %%arg1  db  %1,10,0     ; first argument
    10                              <1>     section .text               ; the printf arguments
    11                              <1>         mov rdi, %2
    12                              <1>         mov rsi, %%arg1
    13                              <1>         mov rax, 0              ; no floating point
    14                              <1>         call fprintf
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> ; Вывод содержимого контейнера
    18                              <1> %macro  PrintContainer2    3
    19                              <1>     mov     rdi, %1
    20                              <1>     mov     esi, %2
    21                              <1>     mov     rdx, %3
    22                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
    23                              <1>     call    OutContainer
    24                              <1> %endmacro
    25                              <1> 
    26                              <1> %macro  PrintInt2    2
    27                              <1>     section .data
    28                              <1>         %%arg1  db  "%d ",10,0     ; first argument
    29                              <1>     section .text               ; the printf arguments
    30                              <1>         mov rdi, %2
    31                              <1>         mov rsi, %%arg1
    32                              <1>         mov rdx, %1
    33                              <1>         mov rax, 0              ; no floating point
    34                              <1>         call fprintf
    35                              <1> %endmacro
    36                              <1> 
    37                              <1> %macro  PrintDouble2    2
    38                              <1>     section .data
    39                              <1>         %%arg1  db  "%g",0     ; first argument
    40                              <1>     section .text               ; the printf arguments
    41                              <1>         mov rdi, %2
    42                              <1>         mov rsi, %%arg1
    43                              <1>         movsd xmm0, %1
    44                              <1>         mov rax, 1              ; no floating point
    45                              <1>         call fprintf
    46                              <1> %endmacro
     7                                  
     8                                  global BubbleSortContainer2
     9                                  BubbleSortContainer2:
    10                                  section .data
    11 00000000 25643A2000                  numFmt  db  "%d: ",0
    12 00000005 0000000000000000            real dq 0.0
    13 0000000D 436F6D706C6578206E-         outfmt db "Complex number (%d, %d) - %g",10,0
    13 00000016 756D62657220282564-
    13 0000001F 2C20256429202D2025-
    13 00000028 670A00             
    14                                  section .bss
    15 00000000 <res 00000008>              pcont  resq    1   ; адрес контейнера
    16 00000008 <res 00000004>              len    resd    1   ; адрес для сохранения числа введенных элементов
    17 0000000C <res 00000008>              FILE   resq    1   ; указатель на файл
    18 00000014 <res 00000004>              cntr   resd    1   ; вспомогательный счетчик
    19 00000018 <res 00000004>              cntr2   resd    1   ; вспомогательный счетчик
    20 0000001C <res 00000004>              lptr    resd    1   ; вспомогательный счетчик
    21 00000020 <res 00000008>              firstad resq 1
    22 00000028 <res 00000008>              first resq 1
    23 00000030 <res 00000008>              second resq 1
    24 00000038 <res 00000008>              .p      resq  1       ; вычисленный периметр прямоугольника
    25                                  
    26                                  section .text
    27 00000000 55                      push rbp
    28 00000001 4889E5                  mov rbp, rsp
    29                                  
    30 00000004 48893C25[00000000]          mov [pcont], rdi   ; сохраняется указатель на контейнер
    31 0000000C 893425[08000000]            mov [len],   esi     ; сохраняется число элементов
    32 00000013 48891425[0C000000]          mov [FILE],  rdx    ; сохраняется указатель на файл
    33 0000001B 8A0C25[08000000]        	mov cl, [len]					;set cl with array length
    34 00000022 880C25[14000000]        	mov [cntr], cl					;set this variable with array length
    35                                  
    36                                      PrintStr2 "real0:", [FILE]
    36                              <1>  section .data
    36 0000002B 7265616C303A0A00    <1>  %%arg1 db %1,10,0
    36                              <1>  section .text
    36 00000029 488B3C25[0C000000]  <1>  mov rdi, %2
    36 00000031 48BE-               <1>  mov rsi, %%arg1
    36 00000033 [2B00000000000000]  <1>
    36 0000003B B800000000          <1>  mov rax, 0
    36 00000040 E8(00000000)        <1>  call fprintf
    37                                      
    38 00000045 488B3C25[00000000]          mov     rdi, [pcont]
    39 0000004D 4883C704                    add rdi, 4
    40 00000051 488B3425[0C000000]          mov     rsi, [FILE]
    41 00000059 48893C25[20000000]          mov [firstad], rdi
    42 00000061 E8(00000000)                call    OutComplexNumber
    43                                  
    44                                      up1 :
    45 00000066 488B3C25[00000000]      	mov rdi, [pcont]						;Points to start
    46 0000006E 8A0425[14000000]        	mov al, [cntr]					;
    47 00000075 8A1C25[1C000000]        	mov bl, [lptr]
    48 0000007C 28D8                    	sub al, bl						; n-i (Rather to increase i, Decrements n)
    49 0000007E 880425[18000000]        	mov [cntr2], al					; j pointer in bubble sort
    50                                  
    51                                      PrintStr2 "entered 2", [FILE]
    51                              <1>  section .data
    51 00000033 656E74657265642032- <1>  %%arg1 db %1,10,0
    51 0000003C 0A00                <1>
    51                              <1>  section .text
    51 00000085 488B3C25[0C000000]  <1>  mov rdi, %2
    51 0000008D 48BE-               <1>  mov rsi, %%arg1
    51 0000008F [3300000000000000]  <1>
    51 00000097 B800000000          <1>  mov rax, 0
    51 0000009C E8(00000000)        <1>  call fprintf
    52                                      PrintContainer2 [pcont], [len], [FILE]
    52 000000A1 488B3C25[00000000]  <1>  mov rdi, %1
    52 000000A9 8B3425[08000000]    <1>  mov esi, %2
    52 000000B0 488B1425[0C000000]  <1>  mov rdx, %3
    52 000000B8 B800000000          <1>  mov rax, 0
    52 000000BD E8(00000000)        <1>  call OutContainer
    53                                  
    54                                  	up2:
    55                                          ; PrintStr2 "entered 3", [FILE]
    56                                          ; PrintContainer2 [pcont], [len], [FILE]
    57                                          ; PrintInt2 [pcont], [FILE]
    58                                          ; PrintInt2 [pcont+1], [FILE]
    59                                  
    60 000000C2 4883C704                        add rdi, 4
    61 000000C6 48893C25[28000000]              mov [first], rdi
    62 000000CE 4C8B07                  		mov r8, [rdi]				;Get [j] in r8
    63 000000D1 4883C710                		add rdi, 16
    64 000000D5 4C8B0F                          mov r9, [rdi]			;Get [j+1]in bl
    65 000000D8 4D39C8                  		cmp r8, r9
    66 000000DB 724D                    		jb skip		 				;Compares
    67                                          PrintStr2 "didnt enter skip", [FILE]
    67                              <1>  section .data
    67 0000003E 6469646E7420656E74- <1>  %%arg1 db %1,10,0
    67 00000047 657220736B69700A00  <1>
    67                              <1>  section .text
    67 000000DD 488B3C25[0C000000]  <1>  mov rdi, %2
    67 000000E5 48BE-               <1>  mov rsi, %%arg1
    67 000000E7 [3E00000000000000]  <1>
    67 000000EF B800000000          <1>  mov rax, 0
    67 000000F4 E8(00000000)        <1>  call fprintf
    68                                  
    69 000000F9 4883EF14                        sub rdi, 20
    70 000000FD 4C8B4710                        mov r8, [rdi + 16]					;If larger swapped
    71 00000101 48897F10                		mov [rdi + 16], rdi
    72 00000105 4C8907                          mov [rdi], r8
    73 00000108 4883C704                        add rdi, 4
    74 0000010C 4C8B4710                        mov r8, [rdi + 16]					;If larger swapped
    75 00000110 48897F10                		mov [rdi + 16], rdi
    76 00000114 4C8907                          mov [rdi], r8
    77 00000117 4883C704                        add rdi, 4
    78 0000011B 4C8B4710                        mov r8, [rdi + 16]					;If larger swapped
    79 0000011F 48897F10                		mov [rdi + 16], rdi
    80 00000123 4C8907                          mov [rdi], r8
    81 00000126 4883C704                        add rdi, 4
    82                                  
    83                                          skip:
    84                                              PrintStr2 "entered skip", [FILE]
    84                              <1>  section .data
    84 00000050 656E74657265642073- <1>  %%arg1 db %1,10,0
    84 00000059 6B69700A00          <1>
    84                              <1>  section .text
    84 0000012A 488B3C25[0C000000]  <1>  mov rdi, %2
    84 00000132 48BE-               <1>  mov rsi, %%arg1
    84 00000134 [5000000000000000]  <1>
    84 0000013C B800000000          <1>  mov rax, 0
    84 00000141 E8(00000000)        <1>  call fprintf
    85                                              ; sub rdi, 4
    86 00000146 4883C710                		    add rdi, 16			;Else continues to next number
    87 0000014A 802C25[18000000]01      		    sub byte[cntr2], 1
    88 00000152 0F856AFFFFFF            		    jnz up2
    89                                  			
    90 00000158 802C25[14000000]01      	sub byte[cntr], 1						;Decrements n (Rather to increase i)
    91 00000160 0F8500FFFFFF            	jnz up1
    92 00000166 C3                      	ret
