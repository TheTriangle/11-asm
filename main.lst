     1                                  ;------------------------------------------------------------------------------
     2                                  ; main.asm - содержит главную функцию,
     3                                  ; обеспечивающую простое тестирование
     4                                  ;------------------------------------------------------------------------------
     5                                  ; main.asm
     6                                  
     7                                  global  COMPLEXNUMBER
     8                                  global  COORDINATES
     9                                  global  FRACTION
    10                                  
    11                                  %include "macros.mac"
     1                              <1> ; macros.mac - файл с макроопределениями
     2                              <1> 
     3                              <1> extern  fopen
     4                              <1> extern  fscanf
     5                              <1> extern  fclose
     6                              <1> extern  fprintf
     7                              <1> extern  printf
     8                              <1> extern  stdout
     9                              <1> extern  time
    10                              <1> extern  srand
    11                              <1> extern  strcmp
    12                              <1> extern  atoi
    13                              <1> extern  clock
    14                              <1> extern  CLOCKS_PER_SEC
    15                              <1> 
    16                              <1> extern  InContainer
    17                              <1> extern  InRndContainer
    18                              <1> extern  OutContainer
    19                              <1> extern  BubbleSortContainer
    20                              <1> extern  BubbleSortContainer2
    21                              <1> ;-------------------------------------------------------------
    22                              <1> ; Вывод строки символов из буфера
    23                              <1> %macro	PrintStrBuf 2
    24                              <1>         mov rdi, %2
    25                              <1>         mov rsi, %1
    26                              <1>         xor rax, rax
    27                              <1>         call fprintf
    28                              <1> %endmacro
    29                              <1> 
    30                              <1> ;-------------------------------------------------------------
    31                              <1> ; Вывод строки, передаваемой непосредственно макросу
    32                              <1> %macro  PrintStr    2
    33                              <1>     section .data
    34                              <1>         %%arg1  db  %1,0        ; first argument
    35                              <1>     section .text               ; the printf arguments
    36                              <1>         mov rdi, %2
    37                              <1>         mov rsi, %%arg1
    38                              <1>         mov rax, 0              ; no floating point
    39                              <1>         call fprintf
    40                              <1> %endmacro
    41                              <1> 
    42                              <1> ;-------------------------------------------------------------
    43                              <1> ; Вывод строки, передаваемой непосредственно макросу
    44                              <1> ; с переводом на следующую строку
    45                              <1> %macro  PrintStrLn    2
    46                              <1>     section .data
    47                              <1>         %%arg1  db  %1,10,0     ; first argument
    48                              <1>     section .text               ; the printf arguments
    49                              <1>         mov rdi, %2
    50                              <1>         mov rsi, %%arg1
    51                              <1>         mov rax, 0              ; no floating point
    52                              <1>         call fprintf
    53                              <1> %endmacro
    54                              <1> 
    55                              <1> ;-------------------------------------------------------------
    56                              <1> ; Вывод целого числа
    57                              <1> %macro  PrintInt    2
    58                              <1>     section .data
    59                              <1>         %%arg1  db  "%d",0     ; first argument
    60                              <1>     section .text               ; the printf arguments
    61                              <1>         mov rdi, %2
    62                              <1>         mov rsi, %%arg1
    63                              <1>         mov rdx, %1
    64                              <1>         mov rax, 0              ; no floating point
    65                              <1>         call fprintf
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> ;-------------------------------------------------------------
    69                              <1> ; Вывод 64-разрядного беззнакового целого числа
    70                              <1> %macro  PrintLLUns    2
    71                              <1>     section .data
    72                              <1>         %%arg1  db  "%llu",0     ; first argument
    73                              <1>     section .text               ; the printf arguments
    74                              <1>         mov rdi, %2
    75                              <1>         mov rsi, %%arg1
    76                              <1>         mov rdx, %1
    77                              <1>         mov rax, 0              ; no floating point
    78                              <1>         call fprintf
    79                              <1> %endmacro
    80                              <1> 
    81                              <1> ;-------------------------------------------------------------
    82                              <1> ; Вывод действительного числа двойной точности
    83                              <1> %macro  PrintDouble    2
    84                              <1>     section .data
    85                              <1>         %%arg1  db  "%g",0     ; first argument
    86                              <1>     section .text               ; the printf arguments
    87                              <1>         mov rdi, %2
    88                              <1>         mov rsi, %%arg1
    89                              <1>         movsd xmm0, %1
    90                              <1>         mov rax, 1              ; no floating point
    91                              <1>         call fprintf
    92                              <1> %endmacro
    93                              <1> 
    94                              <1> ;-------------------------------------------------------------
    95                              <1> ; Вывод содержимого контейнера
    96                              <1> %macro  PrintContainer    3
    97                              <1>     mov     rdi, %1
    98                              <1>     mov     esi, %2
    99                              <1>     mov     rdx, %3
   100                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   101                              <1>     call    OutContainer
   102                              <1> %endmacro
   103                              <1> 
   104                              <1> ;-------------------------------------------------------------
   105                              <1> ; Сортировка контейнера
   106                              <1> %macro  SortContainer    3
   107                              <1>     mov     rdi, %1
   108                              <1>     mov     esi, %2
   109                              <1>     mov     rdx, %3
   110                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   111                              <1>     call    BubbleSortContainer
   112                              <1> %endmacro
   113                              <1> 
   114                              <1> 
   115                              <1> ;-------------------------------------------------------------
   116                              <1> ; Сортировка контейнера
   117                              <1> %macro  SortContainer2    3
   118                              <1>     mov     rdi, %1
   119                              <1>     mov     esi, %2
   120                              <1>     mov     rdx, %3
   121                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   122                              <1>     call    BubbleSortContainer2
   123                              <1> %endmacro
   124                              <1> 
   125                              <1> ;-------------------------------------------------------------
   126                              <1> ; Открытие файла для чтения, записи
   127                              <1> %macro  FileOpen   3
   128                              <1>     section .data
   129                              <1>         %%rw  db  %2,0          ; признак доступа
   130                              <1>     section .text               ; the printf arguments
   131                              <1>         mov     rdi, %1         ; адрес строки открываемого файла
   132                              <1>         lea     rsi, [%%rw]       ; строка определяющая чтение-запись. Задается явно
   133                              <1>         mov     rax, 0          ; нет чисел с плавающей точкой
   134                              <1>         call    fopen
   135                              <1>         mov     [%3], rax
   136                              <1> %endmacro
   137                              <1> 
   138                              <1> ;-------------------------------------------------------------
   139                              <1> ; Закрытие открытого файла
   140                              <1> %macro  FileClose   1
   141                              <1>     mov     rdi, %1             ; передача указателя на закрываемый файл
   142                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   143                              <1>     call    fclose
   144                              <1> %endmacro
   145                              <1> 
    12                                  
    13                                  section .data
    14 00000000 01000000                    COMPLEXNUMBER   dd  1
    15 00000004 02000000                    COORDINATES    dd  2
    16 00000008 03000000                    FRACTION    dd  3
    17 0000000C 000000000000F03F            oneDouble   dq  1.0
    18 00000014 496E636F7272656374-         erMsg1  db "Incorrect number of arguments = %d: ",10,0
    18 0000001D 206E756D626572206F-
    18 00000026 6620617267756D656E-
    18 0000002F 7473203D2025643A20-
    18 00000038 0A00               
    19 0000003A 2D6E00                      rndGen  db "-n",0
    20 0000003D 2D6600                      fileGen  db "-f",0
    21 00000040 696E636F7272656374-         errMessage1 db  "incorrect command line!", 10,"  Waited:",10
    21 00000049 20636F6D6D616E6420-
    21 00000052 6C696E65210A202057-
    21 0000005B 61697465643A0A     
    22 00000062 2020202020636F6D6D-                     db  "     command -f infile outfile01 outfile02",10,"  Or:",10
    22 0000006B 616E64202D6620696E-
    22 00000074 66696C65206F757466-
    22 0000007D 696C653031206F7574-
    22 00000086 66696C6530320A2020-
    22 0000008F 4F723A0A           
    23 00000093 2020202020636F6D6D-                     db  "     command -n number outfile01 outfile02",10,0
    23 0000009C 616E64202D6E206E75-
    23 000000A5 6D626572206F757466-
    23 000000AE 696C653031206F7574-
    23 000000B7 66696C6530320A00   
    24 000000BF 696E636F7272656374-         errMessage2 db  "incorrect qualifier value!", 10,"  Waited:",10
    24 000000C8 207175616C69666965-
    24 000000D1 722076616C7565210A-
    24 000000DA 20205761697465643A-
    24 000000E3 0A                 
    25 000000E4 2020202020636F6D6D-                     db  "     command -f infile outfile01 outfile02",10,"  Or:",10
    25 000000ED 616E64202D6620696E-
    25 000000F6 66696C65206F757466-
    25 000000FF 696C653031206F7574-
    25 00000108 66696C6530320A2020-
    25 00000111 4F723A0A           
    26 00000115 2020202020636F6D6D-                     db  "     command -n number outfile01 outfile02",10,0
    26 0000011E 616E64202D6E206E75-
    26 00000127 6D626572206F757466-
    26 00000130 696C653031206F7574-
    26 00000139 66696C6530320A00   
    27 00000141 00000000                    len         dd  0           ; Количество элементов в массиве
    28                                  section .bss
    29 00000000 <res 00000004>              argc        resd    1
    30 00000004 <res 00000004>              num         resd    1
    31 00000008 <res 00000008>              sum         resq    1
    32 00000010 <res 00000008>              start       resq    1       ; начало отсчета времени
    33 00000018 <res 00000008>              delta       resq    1       ; интервал отсчета времени
    34 00000020 <res 00000010>              startTime   resq    2       ; начало отсчета времени
    35 00000030 <res 00000010>              endTime     resq    2       ; конец отсчета времени
    36 00000040 <res 00000010>              deltaTime   resq    2       ; интервал отсчета времени
    37 00000050 <res 00000008>              ifst        resq    1       ; указатель на файл, открываемый файл для чтения фигур
    38 00000058 <res 00000008>              ofst1       resq    1       ; указатель на файл, открываемый файл для записи контейнера
    39 00000060 <res 00000008>              ofst2       resq    1       ; указатель на файл, открываемый файл для записи периметра
    40 00000068 <res 00027100>              cont        resb    160000  ; Массив используемый для хранения данных
    41                                  
    42                                  section .text
    43                                      global main
    44                                  main:
    45 00000000 55                      push rbp
    46 00000001 4889E5                  mov rbp,rsp
    47                                  
    48 00000004 893C25[00000000]            mov dword [argc], edi ;rdi contains number of arguments
    49 0000000B 4989FC                      mov r12, rdi ;rdi contains number of arguments
    50 0000000E 4989F5                      mov r13, rsi ;rsi contains the address to the array of arguments
    51                                  
    52                                  .printArguments:
    53                                      PrintStrLn "The command and arguments:", [stdout]
    53                              <1>  section .data
    53 00000145 54686520636F6D6D61- <1>  %%arg1 db %1,10,0
    53 0000014E 6E6420616E64206172- <1>
    53 00000157 67756D656E74733A0A- <1>
    53 00000160 00                  <1>
    53                              <1>  section .text
    53 00000011 488B3C25[00000000]  <1>  mov rdi, %2
    53 00000019 48BE-               <1>  mov rsi, %%arg1
    53 0000001B [4501000000000000]  <1>
    53 00000023 B800000000          <1>  mov rax, 0
    53 00000028 E8(00000000)        <1>  call fprintf
    54 0000002D BB00000000                  mov rbx, 0
    55                                  .printLoop:
    56                                      PrintStrBuf qword [r13+rbx*8], [stdout]
    56 00000032 488B3C25[00000000]  <1>  mov rdi, %2
    56 0000003A 498B74DD00          <1>  mov rsi, %1
    56 0000003F 4831C0              <1>  xor rax, rax
    56 00000042 E8(00000000)        <1>  call fprintf
    57                                      PrintStr    10, [stdout]
    57                              <1>  section .data
    57 00000161 0A00                <1>  %%arg1 db %1,0
    57                              <1>  section .text
    57 00000047 488B3C25[00000000]  <1>  mov rdi, %2
    57 0000004F 48BE-               <1>  mov rsi, %%arg1
    57 00000051 [6101000000000000]  <1>
    57 00000059 B800000000          <1>  mov rax, 0
    57 0000005E E8(00000000)        <1>  call fprintf
    58 00000063 48FFC3                      inc rbx
    59 00000066 4C39E3                      cmp rbx, r12
    60 00000069 7CC7                        jl .printLoop
    61                                  
    62 0000006B 4983FC05                    cmp r12, 5      ; проверка количества аргументов
    63 0000006F 741F                        je .next1
    64                                      PrintStrBuf errMessage1, [stdout]
    64 00000071 488B3C25[00000000]  <1>  mov rdi, %2
    64 00000079 48BE-               <1>  mov rsi, %1
    64 0000007B [4000000000000000]  <1>
    64 00000083 4831C0              <1>  xor rax, rax
    64 00000086 E8(00000000)        <1>  call fprintf
    65 0000008B E945050000                  jmp .return
    66                                  .next1:
    67                                      PrintStrLn "Start", [stdout]
    67                              <1>  section .data
    67 00000163 53746172740A00      <1>  %%arg1 db %1,10,0
    67                              <1>  section .text
    67 00000090 488B3C25[00000000]  <1>  mov rdi, %2
    67 00000098 48BE-               <1>  mov rsi, %%arg1
    67 0000009A [6301000000000000]  <1>
    67 000000A2 B800000000          <1>  mov rax, 0
    67 000000A7 E8(00000000)        <1>  call fprintf
    68                                      ; Проверка второго аргумента
    69 000000AC 48BF-                       mov rdi, rndGen
    69 000000AE [3A00000000000000] 
    70 000000B6 498B7508                    mov rsi, [r13+8]    ; второй аргумент командной строки
    71 000000BA E8(00000000)                call strcmp
    72 000000BF 4883F800                    cmp rax, 0          ; строки равны "-n"
    73 000000C3 743C                        je .next2
    74 000000C5 48BF-                       mov rdi, fileGen
    74 000000C7 [3D00000000000000] 
    75 000000CF 498B7508                    mov rsi, [r13+8]    ; второй аргумент командной строки
    76 000000D3 E8(00000000)                call strcmp
    77 000000D8 4883F800                    cmp rax, 0          ; строки равны "-f"
    78 000000DC 0F84C2000000                je .next3
    79                                      PrintStrBuf errMessage2, [stdout]
    79 000000E2 488B3C25[00000000]  <1>  mov rdi, %2
    79 000000EA 48BE-               <1>  mov rsi, %1
    79 000000EC [BF00000000000000]  <1>
    79 000000F4 4831C0              <1>  xor rax, rax
    79 000000F7 E8(00000000)        <1>  call fprintf
    80 000000FC E9D4040000                  jmp .return
    81                                  .next2:
    82                                      ; Генерация случайных фигур
    83                                  
    84 00000101 498B7D10                    mov rdi, [r13+16]
    85 00000105 E8(00000000)                call atoi
    86 0000010A 890425[04000000]            mov [num], eax
    87                                      PrintInt [num], [stdout]
    87                              <1>  section .data
    87 0000016A 256400              <1>  %%arg1 db "%d",0
    87                              <1>  section .text
    87 00000111 488B3C25[00000000]  <1>  mov rdi, %2
    87 00000119 48BE-               <1>  mov rsi, %%arg1
    87 0000011B [6A01000000000000]  <1>
    87 00000123 488B1425[04000000]  <1>  mov rdx, %1
    87 0000012B B800000000          <1>  mov rax, 0
    87 00000130 E8(00000000)        <1>  call fprintf
    88                                      PrintStrLn "", [stdout]
    88                              <1>  section .data
    88 0000016D 0A00                <1>  %%arg1 db %1,10,0
    88                              <1>  section .text
    88 00000135 488B3C25[00000000]  <1>  mov rdi, %2
    88 0000013D 48BE-               <1>  mov rsi, %%arg1
    88 0000013F [6D01000000000000]  <1>
    88 00000147 B800000000          <1>  mov rax, 0
    88 0000014C E8(00000000)        <1>  call fprintf
    89 00000151 8B0425[04000000]            mov eax, [num]
    90 00000158 83F801                      cmp eax, 1
    91 0000015B 0F8C18040000                jl .fall1
    92 00000161 3D10270000                  cmp eax, 10000
    93 00000166 0F8F0D040000                jg .fall1
    94                                      ; Начальная установка генератора случайных чисел
    95 0000016C 4831FF                      xor     rdi, rdi
    96 0000016F 4831C0                      xor     rax, rax
    97 00000172 E8(00000000)                call    time
    98 00000177 4889C7                      mov     rdi, rax
    99 0000017A 4831C0                      xor     rax, rax
   100 0000017D E8(00000000)                call    srand
   101                                      ; Заполнение контейнера случайными фигурами
   102 00000182 48BF-                       mov     rdi, cont   ; передача адреса контейнера
   102 00000184 [6800000000000000] 
   103 0000018C 48BE-                       mov     rsi, len    ; передача адреса для длины
   103 0000018E [4101000000000000] 
   104 00000196 8B1425[04000000]            mov     edx, [num]  ; передача количества порождаемых фигур
   105 0000019D E8(00000000)                call    InRndContainer
   106 000001A2 EB54                        jmp .task2
   107                                  
   108                                  .next3:
   109                                      ; Получение фигур из файла
   110                                      FileOpen [r13+16], "r", ifst
   110                              <1>  section .data
   110 0000016F 7200                <1>  %%rw db %2,0
   110                              <1>  section .text
   110 000001A4 498B7D10            <1>  mov rdi, %1
   110 000001A8 488D3425[6F010000]  <1>  lea rsi, [%%rw]
   110 000001B0 B800000000          <1>  mov rax, 0
   110 000001B5 E8(00000000)        <1>  call fopen
   110 000001BA 48890425[50000000]  <1>  mov [%3], rax
   111                                      ; Заполнение контейнера фигурами из файла
   112 000001C2 48BF-                       mov     rdi, cont           ; адрес контейнера
   112 000001C4 [6800000000000000] 
   113 000001CC 48BE-                       mov     rsi, len            ; адрес для установки числа элементов
   113 000001CE [4101000000000000] 
   114 000001D6 488B1425[50000000]          mov     rdx, [ifst]         ; указатель на файл
   115 000001DE 4831C0                      xor     rax, rax
   116 000001E1 E8(00000000)                call    InContainer         ; ввод данных в контейнер
   117                                      FileClose [ifst]
   117 000001E6 488B3C25[50000000]  <1>  mov rdi, %1
   117 000001EE B800000000          <1>  mov rax, 0
   117 000001F3 E8(00000000)        <1>  call fclose
   118                                  
   119                                  .task2:
   120                                      ; Вывод содержимого контейнера в первый раз
   121                                  
   122                                      PrintStrLn "Filled container:", [stdout]
   122                              <1>  section .data
   122 00000171 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   122 0000017A 6E7461696E65723A0A- <1>
   122 00000183 00                  <1>
   122                              <1>  section .text
   122 000001F8 488B3C25[00000000]  <1>  mov rdi, %2
   122 00000200 48BE-               <1>  mov rsi, %%arg1
   122 00000202 [7101000000000000]  <1>
   122 0000020A B800000000          <1>  mov rax, 0
   122 0000020F E8(00000000)        <1>  call fprintf
   123                                      PrintContainer cont, [len], [stdout]
   123 00000214 48BF-               <1>  mov rdi, %1
   123 00000216 [6800000000000000]  <1>
   123 0000021E 8B3425[41010000]    <1>  mov esi, %2
   123 00000225 488B1425[00000000]  <1>  mov rdx, %3
   123 0000022D B800000000          <1>  mov rax, 0
   123 00000232 E8(00000000)        <1>  call OutContainer
   124                                      ; Вычисление времени старта
   125 00000237 B8E4000000                  mov rax, 228   ; 228 is system call for sys_clock_gettime
   126 0000023C 31FF                        xor edi, edi   ; 0 for system clock (preferred over "mov rdi, 0")
   127 0000023E 488D3425[20000000]          lea rsi, [startTime]
   128 00000246 0F05                        syscall        ; [time] contains number of seconds
   129                                                     ; [time + 8] contains number of nanoseconds
   130                                      ; БАБЛСОРТ ВЫЗЫВАЕТСЯ ЗДЕСЬ
   131                                      SortContainer2 cont, [len], [stdout]
   131 00000248 48BF-               <1>  mov rdi, %1
   131 0000024A [6800000000000000]  <1>
   131 00000252 8B3425[41010000]    <1>  mov esi, %2
   131 00000259 488B1425[00000000]  <1>  mov rdx, %3
   131 00000261 B800000000          <1>  mov rax, 0
   131 00000266 E8(00000000)        <1>  call BubbleSortContainer2
   132                                      ; Вычисление времени завершения
   133 0000026B B8E4000000                  mov rax, 228   ; 228 is system call for sys_clock_gettime
   134 00000270 31FF                        xor edi, edi   ; 0 for system clock (preferred over "mov rdi, 0")
   135 00000272 488D3425[30000000]          lea rsi, [endTime]
   136 0000027A 0F05                        syscall        ; [time] contains number of seconds
   137                                                     ; [time + 8] contains number of nanoseconds
   138                                      
   139                                      PrintStrLn "Filled container:", [stdout]
   139                              <1>  section .data
   139 00000184 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   139 0000018D 6E7461696E65723A0A- <1>
   139 00000196 00                  <1>
   139                              <1>  section .text
   139 0000027C 488B3C25[00000000]  <1>  mov rdi, %2
   139 00000284 48BE-               <1>  mov rsi, %%arg1
   139 00000286 [8401000000000000]  <1>
   139 0000028E B800000000          <1>  mov rax, 0
   139 00000293 E8(00000000)        <1>  call fprintf
   140                                      PrintContainer cont, [len], [stdout]
   140 00000298 48BF-               <1>  mov rdi, %1
   140 0000029A [6800000000000000]  <1>
   140 000002A2 8B3425[41010000]    <1>  mov esi, %2
   140 000002A9 488B1425[00000000]  <1>  mov rdx, %3
   140 000002B1 B800000000          <1>  mov rax, 0
   140 000002B6 E8(00000000)        <1>  call OutContainer
   141                                      
   142                                      FileOpen [r13+24], "w", ofst1
   142                              <1>  section .data
   142 00000197 7700                <1>  %%rw db %2,0
   142                              <1>  section .text
   142 000002BB 498B7D18            <1>  mov rdi, %1
   142 000002BF 488D3425[97010000]  <1>  lea rsi, [%%rw]
   142 000002C7 B800000000          <1>  mov rax, 0
   142 000002CC E8(00000000)        <1>  call fopen
   142 000002D1 48890425[58000000]  <1>  mov [%3], rax
   143                                      PrintStrLn "Filled container:", [ofst1]
   143                              <1>  section .data
   143 00000199 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   143 000001A2 6E7461696E65723A0A- <1>
   143 000001AB 00                  <1>
   143                              <1>  section .text
   143 000002D9 488B3C25[58000000]  <1>  mov rdi, %2
   143 000002E1 48BE-               <1>  mov rsi, %%arg1
   143 000002E3 [9901000000000000]  <1>
   143 000002EB B800000000          <1>  mov rax, 0
   143 000002F0 E8(00000000)        <1>  call fprintf
   144                                      PrintContainer cont, [len], [ofst1]
   144 000002F5 48BF-               <1>  mov rdi, %1
   144 000002F7 [6800000000000000]  <1>
   144 000002FF 8B3425[41010000]    <1>  mov esi, %2
   144 00000306 488B1425[58000000]  <1>  mov rdx, %3
   144 0000030E B800000000          <1>  mov rax, 0
   144 00000313 E8(00000000)        <1>  call OutContainer
   145                                      FileClose [ofst1]
   145 00000318 488B3C25[58000000]  <1>  mov rdi, %1
   145 00000320 B800000000          <1>  mov rax, 0
   145 00000325 E8(00000000)        <1>  call fclose
   146                                  
   147                                  
   148                                      
   149                                      ; ContainerSum cont, [len], [sum]
   150                                      ; PrintDouble xmm0, [stdout]
   151                                  
   152                                      ; Получение времени работы
   153 0000032A 488B0425[30000000]          mov rax, [endTime]
   154 00000332 482B0425[20000000]          sub rax, [startTime]
   155 0000033A 488B1C25[38000000]          mov rbx, [endTime+8]
   156 00000342 488B0C25[28000000]          mov rcx, [startTime+8]
   157 0000034A 4839CB                      cmp rbx, rcx
   158 0000034D 7D0A                        jge .subNanoOnly
   159 0000034F 48FFC8                      dec rax
   160 00000352 4881C300CA9A3B              add rbx, 1000000000
   161                                  .subNanoOnly:
   162 00000359 482B1C25[28000000]          sub rbx, [startTime+8]
   163 00000361 48890425[40000000]          mov [deltaTime], rax
   164 00000369 48891C25[48000000]          mov [deltaTime+8], rbx
   165                                  
   166                                      ; Вывод периметра нескольких фигур
   167                                      PrintDouble [sum], [stdout]
   167                              <1>  section .data
   167 000001AC 256700              <1>  %%arg1 db "%g",0
   167                              <1>  section .text
   167 00000371 488B3C25[00000000]  <1>  mov rdi, %2
   167 00000379 48BE-               <1>  mov rsi, %%arg1
   167 0000037B [AC01000000000000]  <1>
   167 00000383 F20F100425-         <1>  movsd xmm0, %1
   167 00000388 [08000000]          <1>
   167 0000038C B801000000          <1>  mov rax, 1
   167 00000391 E8(00000000)        <1>  call fprintf
   168                                      PrintStr ". Calculaton time = ", [stdout]
   168                              <1>  section .data
   168 000001AF 2E2043616C63756C61- <1>  %%arg1 db %1,0
   168 000001B8 746F6E2074696D6520- <1>
   168 000001C1 3D2000              <1>
   168                              <1>  section .text
   168 00000396 488B3C25[00000000]  <1>  mov rdi, %2
   168 0000039E 48BE-               <1>  mov rsi, %%arg1
   168 000003A0 [AF01000000000000]  <1>
   168 000003A8 B800000000          <1>  mov rax, 0
   168 000003AD E8(00000000)        <1>  call fprintf
   169                                      PrintLLUns [deltaTime], [stdout]
   169                              <1>  section .data
   169 000001C4 256C6C7500          <1>  %%arg1 db "%llu",0
   169                              <1>  section .text
   169 000003B2 488B3C25[00000000]  <1>  mov rdi, %2
   169 000003BA 48BE-               <1>  mov rsi, %%arg1
   169 000003BC [C401000000000000]  <1>
   169 000003C4 488B1425[40000000]  <1>  mov rdx, %1
   169 000003CC B800000000          <1>  mov rax, 0
   169 000003D1 E8(00000000)        <1>  call fprintf
   170                                      PrintStr " sec, ", [stdout]
   170                              <1>  section .data
   170 000001C9 207365632C2000      <1>  %%arg1 db %1,0
   170                              <1>  section .text
   170 000003D6 488B3C25[00000000]  <1>  mov rdi, %2
   170 000003DE 48BE-               <1>  mov rsi, %%arg1
   170 000003E0 [C901000000000000]  <1>
   170 000003E8 B800000000          <1>  mov rax, 0
   170 000003ED E8(00000000)        <1>  call fprintf
   171                                      PrintLLUns [deltaTime+8], [stdout]
   171                              <1>  section .data
   171 000001D0 256C6C7500          <1>  %%arg1 db "%llu",0
   171                              <1>  section .text
   171 000003F2 488B3C25[00000000]  <1>  mov rdi, %2
   171 000003FA 48BE-               <1>  mov rsi, %%arg1
   171 000003FC [D001000000000000]  <1>
   171 00000404 488B1425[48000000]  <1>  mov rdx, %1
   171 0000040C B800000000          <1>  mov rax, 0
   171 00000411 E8(00000000)        <1>  call fprintf
   172                                      PrintStr " nsec", [stdout]
   172                              <1>  section .data
   172 000001D5 206E73656300        <1>  %%arg1 db %1,0
   172                              <1>  section .text
   172 00000416 488B3C25[00000000]  <1>  mov rdi, %2
   172 0000041E 48BE-               <1>  mov rsi, %%arg1
   172 00000420 [D501000000000000]  <1>
   172 00000428 B800000000          <1>  mov rax, 0
   172 0000042D E8(00000000)        <1>  call fprintf
   173                                      PrintStr 10, [stdout]
   173                              <1>  section .data
   173 000001DB 0A00                <1>  %%arg1 db %1,0
   173                              <1>  section .text
   173 00000432 488B3C25[00000000]  <1>  mov rdi, %2
   173 0000043A 48BE-               <1>  mov rsi, %%arg1
   173 0000043C [DB01000000000000]  <1>
   173 00000444 B800000000          <1>  mov rax, 0
   173 00000449 E8(00000000)        <1>  call fprintf
   174                                  
   175                                      FileOpen [r13+32], "w", ofst2
   175                              <1>  section .data
   175 000001DD 7700                <1>  %%rw db %2,0
   175                              <1>  section .text
   175 0000044E 498B7D20            <1>  mov rdi, %1
   175 00000452 488D3425[DD010000]  <1>  lea rsi, [%%rw]
   175 0000045A B800000000          <1>  mov rax, 0
   175 0000045F E8(00000000)        <1>  call fopen
   175 00000464 48890425[60000000]  <1>  mov [%3], rax
   176                                      PrintDouble [sum], [ofst2]
   176                              <1>  section .data
   176 000001DF 256700              <1>  %%arg1 db "%g",0
   176                              <1>  section .text
   176 0000046C 488B3C25[60000000]  <1>  mov rdi, %2
   176 00000474 48BE-               <1>  mov rsi, %%arg1
   176 00000476 [DF01000000000000]  <1>
   176 0000047E F20F100425-         <1>  movsd xmm0, %1
   176 00000483 [08000000]          <1>
   176 00000487 B801000000          <1>  mov rax, 1
   176 0000048C E8(00000000)        <1>  call fprintf
   177                                      PrintStr ". Calculaton time = ", [ofst2]
   177                              <1>  section .data
   177 000001E2 2E2043616C63756C61- <1>  %%arg1 db %1,0
   177 000001EB 746F6E2074696D6520- <1>
   177 000001F4 3D2000              <1>
   177                              <1>  section .text
   177 00000491 488B3C25[60000000]  <1>  mov rdi, %2
   177 00000499 48BE-               <1>  mov rsi, %%arg1
   177 0000049B [E201000000000000]  <1>
   177 000004A3 B800000000          <1>  mov rax, 0
   177 000004A8 E8(00000000)        <1>  call fprintf
   178                                      PrintLLUns [deltaTime], [ofst2]
   178                              <1>  section .data
   178 000001F7 256C6C7500          <1>  %%arg1 db "%llu",0
   178                              <1>  section .text
   178 000004AD 488B3C25[60000000]  <1>  mov rdi, %2
   178 000004B5 48BE-               <1>  mov rsi, %%arg1
   178 000004B7 [F701000000000000]  <1>
   178 000004BF 488B1425[40000000]  <1>  mov rdx, %1
   178 000004C7 B800000000          <1>  mov rax, 0
   178 000004CC E8(00000000)        <1>  call fprintf
   179                                      PrintStr " sec, ", [ofst2]
   179                              <1>  section .data
   179 000001FC 207365632C2000      <1>  %%arg1 db %1,0
   179                              <1>  section .text
   179 000004D1 488B3C25[60000000]  <1>  mov rdi, %2
   179 000004D9 48BE-               <1>  mov rsi, %%arg1
   179 000004DB [FC01000000000000]  <1>
   179 000004E3 B800000000          <1>  mov rax, 0
   179 000004E8 E8(00000000)        <1>  call fprintf
   180                                      PrintLLUns [deltaTime+8], [ofst2]
   180                              <1>  section .data
   180 00000203 256C6C7500          <1>  %%arg1 db "%llu",0
   180                              <1>  section .text
   180 000004ED 488B3C25[60000000]  <1>  mov rdi, %2
   180 000004F5 48BE-               <1>  mov rsi, %%arg1
   180 000004F7 [0302000000000000]  <1>
   180 000004FF 488B1425[48000000]  <1>  mov rdx, %1
   180 00000507 B800000000          <1>  mov rax, 0
   180 0000050C E8(00000000)        <1>  call fprintf
   181                                      PrintStr " nsec", [ofst2]
   181                              <1>  section .data
   181 00000208 206E73656300        <1>  %%arg1 db %1,0
   181                              <1>  section .text
   181 00000511 488B3C25[60000000]  <1>  mov rdi, %2
   181 00000519 48BE-               <1>  mov rsi, %%arg1
   181 0000051B [0802000000000000]  <1>
   181 00000523 B800000000          <1>  mov rax, 0
   181 00000528 E8(00000000)        <1>  call fprintf
   182                                      PrintStr 10, [ofst2]
   182                              <1>  section .data
   182 0000020E 0A00                <1>  %%arg1 db %1,0
   182                              <1>  section .text
   182 0000052D 488B3C25[60000000]  <1>  mov rdi, %2
   182 00000535 48BE-               <1>  mov rsi, %%arg1
   182 00000537 [0E02000000000000]  <1>
   182 0000053F B800000000          <1>  mov rax, 0
   182 00000544 E8(00000000)        <1>  call fprintf
   183                                      FileClose [ofst2]
   183 00000549 488B3C25[60000000]  <1>  mov rdi, %1
   183 00000551 B800000000          <1>  mov rax, 0
   183 00000556 E8(00000000)        <1>  call fclose
   184                                  
   185                                      PrintStrLn "Stop", [stdout]
   185                              <1>  section .data
   185 00000210 53746F700A00        <1>  %%arg1 db %1,10,0
   185                              <1>  section .text
   185 0000055B 488B3C25[00000000]  <1>  mov rdi, %2
   185 00000563 48BE-               <1>  mov rsi, %%arg1
   185 00000565 [1002000000000000]  <1>
   185 0000056D B800000000          <1>  mov rax, 0
   185 00000572 E8(00000000)        <1>  call fprintf
   186 00000577 EB5C                        jmp .return
   187                                  .fall1:
   188                                      PrintStr "incorrect numer of figures = ", [stdout]
   188                              <1>  section .data
   188 00000216 696E636F7272656374- <1>  %%arg1 db %1,0
   188 0000021F 206E756D6572206F66- <1>
   188 00000228 206669677572657320- <1>
   188 00000231 3D2000              <1>
   188                              <1>  section .text
   188 00000579 488B3C25[00000000]  <1>  mov rdi, %2
   188 00000581 48BE-               <1>  mov rsi, %%arg1
   188 00000583 [1602000000000000]  <1>
   188 0000058B B800000000          <1>  mov rax, 0
   188 00000590 E8(00000000)        <1>  call fprintf
   189                                      PrintInt [num], [stdout]
   189                              <1>  section .data
   189 00000234 256400              <1>  %%arg1 db "%d",0
   189                              <1>  section .text
   189 00000595 488B3C25[00000000]  <1>  mov rdi, %2
   189 0000059D 48BE-               <1>  mov rsi, %%arg1
   189 0000059F [3402000000000000]  <1>
   189 000005A7 488B1425[04000000]  <1>  mov rdx, %1
   189 000005AF B800000000          <1>  mov rax, 0
   189 000005B4 E8(00000000)        <1>  call fprintf
   190                                      PrintStrLn ". Set 0 < number <= 10000", [stdout]
   190                              <1>  section .data
   190 00000237 2E205365742030203C- <1>  %%arg1 db %1,10,0
   190 00000240 206E756D626572203C- <1>
   190 00000249 3D2031303030300A00  <1>
   190                              <1>  section .text
   190 000005B9 488B3C25[00000000]  <1>  mov rdi, %2
   190 000005C1 48BE-               <1>  mov rsi, %%arg1
   190 000005C3 [3702000000000000]  <1>
   190 000005CB B800000000          <1>  mov rax, 0
   190 000005D0 E8(00000000)        <1>  call fprintf
   191                                  .return:
   192 000005D5 C9                      leave
   193 000005D6 C3                      ret
