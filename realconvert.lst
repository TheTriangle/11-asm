     1                                  ;------------------------------------------------------------------------------
     2                                  ; perimeter.asm - единица компиляции, вбирающая функции вычисления периметра
     3                                  ;------------------------------------------------------------------------------
     4                                  %include "printmacros.mac"
     1                              <1> extern  fprintf
     2                              <1> extern  OutContainer
     3                              <1> 
     4                              <1> ;-------------------------------------------------------------
     5                              <1> ; Вывод строки, передаваемой непосредственно макросу
     6                              <1> ; с переводом на следующую строку
     7                              <1> %macro  PrintStr2    2
     8                              <1>     section .data
     9                              <1>         %%arg1  db  %1,10,0     ; first argument
    10                              <1>     section .text               ; the printf arguments
    11                              <1>         push rdi
    12                              <1>         push rsi
    13                              <1>         push rax
    14                              <1>         mov rdi, %2
    15                              <1>         mov rsi, %%arg1
    16                              <1>         mov rax, 0              ; no floating point
    17                              <1>         call fprintf
    18                              <1>         pop rdi
    19                              <1>         pop rsi
    20                              <1>         pop rax
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> ; Вывод содержимого контейнера
    24                              <1> %macro  PrintContainer2    3
    25                              <1>     mov     rdi, %1
    26                              <1>     mov     esi, %2
    27                              <1>     mov     rdx, %3
    28                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
    29                              <1>     call    OutContainer
    30                              <1> %endmacro
    31                              <1> 
    32                              <1> %macro  PrintInt2    2
    33                              <1>     section .data
    34                              <1>         %%arg1  db  "%d ",10,0     ; first argument
    35                              <1>     section .text               ; the printf arguments
    36                              <1>         mov rdi, %2
    37                              <1>         mov rsi, %%arg1
    38                              <1>         mov rdx, %1
    39                              <1>         mov rax, 0              ; no floating point
    40                              <1>         call fprintf
    41                              <1> %endmacro
    42                              <1> 
    43                              <1> %macro  PrintDouble2    2
    44                              <1>     section .data
    45                              <1>         %%arg1  db  "%g",0     ; first argument
    46                              <1>     section .text               ; the printf arguments
    47                              <1>         mov rdi, %2
    48                              <1>         mov rsi, %%arg1
    49                              <1>         movsd xmm0, %1
    50                              <1>         mov rax, 1              ; no floating point
    51                              <1>         call fprintf
    52                              <1> %endmacro
     5                                  extern COMPLEXNUMBER
     6                                  extern FRACTION
     7                                  extern COORDINATES
     8                                  extern stdout 
     9                                  
    10                                  ;----------------------------------------------
    11                                  ; Вычисление периметра прямоугольника
    12                                  ;double PerimeterRectangle(void *r) {
    13                                  ;    return 2.0 * (*((int*)r)
    14                                  ;           + *((int*)(r+intSize)));
    15                                  ;}
    16                                  
    17                                  global sqrti
    18                                  sqrti:
    19 00000000 4C89CB                      mov rbx, r9
    20 00000003 4831C0                      xor rax, rax
    21                                  
    22                                      .while:
    23 00000006 4839D8                      cmp rax, rbx
    24 00000009 7311                        jnb .endwhile
    25                                  
    26 0000000B 4801C3                      add rbx, rax
    27 0000000E 48D1EB                      shr rbx, 1
    28                                  
    29 00000011 4C89C8                      mov rax, r9
    30 00000014 4831D2                      xor rdx, rdx
    31 00000017 48F7F3                      div rbx
    32                                  
    33 0000001A EBEA                        jmp .while
    34                                  
    35                                      .endwhile:
    36 0000001C 4889D8                      mov rax, rbx
    37 0000001F C3                          ret
    38                                  
    39                                  
    40                                  global ToRealComplexNumber
    41                                  ToRealComplexNumber:
    42                                  section .data
    43 00000000 19000000                X dd 25
    44                                  section .text
    45 00000020 55                      push rbp
    46 00000021 4889E5                  mov rbp, rsp
    47                                  
    48                                      ; В rdi адрес прямоугольника
    49 00000024 4831C0                      xor rax, rax
    50 00000027 8B07                        mov eax, [rdi]
    51 00000029 8B5F04                      mov ebx, [rdi+4]
    52 0000002C 0FAFC0                      imul eax, eax
    53 0000002F 0FAFDB                      imul ebx, ebx
    54 00000032 01D8                        add eax, ebx 
    55 00000034 BB02000000                  mov ebx, 2 ; TODO take square root
    56 00000039 F7F3                        div ebx
    57                                  breakpoint:
    58 0000003B 4D31C9                      xor r9, r9
    59 0000003E 4189C1                      mov r9d, eax
    60 00000041 E8BAFFFFFF                  call sqrti
    61 00000046 4889D8                      mov rax, rbx
    62                                      
    63                                      ;call sqrti
    64 00000049 F20F2AC0                    cvtsi2sd    xmm0, eax
    65                                      
    66 0000004D 4883C708                    add rdi, 8
    67 00000051 8907                        mov dword[rdi], eax
    68 00000053 4883EF08                    sub rdi, 8
    69                                  
    70 00000057 C9                      leave
    71 00000058 C3                      ret
    72                                  
    73                                  ;----------------------------------------------
    74                                  ; double PerimeterTriangle(void *t) {
    75                                  ;    return (double)(*((int*)t)
    76                                  ;       + *((int*)(t+intSize))
    77                                  ;       + *((int*)(t+2*intSize)));
    78                                  ;}
    79                                  global ToRealFraction
    80                                  ToRealFraction:
    81                                  section .text
    82 00000059 55                      push rbp
    83 0000005A 4889E5                  mov rbp, rsp
    84                                  
    85                                      ; В rdi адрес треугольника
    86 0000005D 8B07                        mov eax, [rdi]
    87 0000005F 8B5F04                      mov ebx, [rdi+4]
    88 00000062 F7F3                        div ebx
    89                                      ; mov eax, [rdi+4]
    90 00000064 F20F2AC0                    cvtsi2sd    xmm0, eax
    91 00000068 4883C708                    add rdi, 8
    92 0000006C 8907                        mov dword[rdi], eax
    93 0000006E 4883EF08                    sub rdi, 8
    94                                      
    95 00000072 C9                      leave
    96 00000073 C3                      ret
    97                                  
    98                                  global ToRealCoordinates
    99                                  ToRealCoordinates:
   100                                  section .text
   101 00000074 55                      push rbp
   102 00000075 4889E5                  mov rbp, rsp
   103                                  
   104                                      ; В rdi адрес треугольника
   105 00000078 8B4704                      mov eax, [rdi+4]
   106 0000007B F20F2AC0                    cvtsi2sd    xmm0, eax
   107 0000007F 4883C708                    add rdi, 8
   108 00000083 8907                        mov dword[rdi], eax
   109 00000085 4883EF08                    sub rdi, 8
   110                                  
   111 00000089 C9                      leave
   112 0000008A C3                      ret
   113                                  ;----------------------------------------------
   114                                  ; Вычисление периметра фигуры
   115                                  ;double PerimeterShape(void *s) {
   116                                  ;    int k = *((int*)s);
   117                                  ;    if(k == RECTANGLE) {
   118                                  ;        return PerimeterRectangle(s+intSize);
   119                                  ;    }
   120                                  ;    else if(k == TRIANGLE) {
   121                                  ;        return PerimeterTriangle(s+intSize);
   122                                  ;    }
   123                                  ;    else {
   124                                  ;        return 0.0;
   125                                  ;    }
   126                                  ;}
   127                                  global ToRealNumber
   128                                  ToRealNumber:
   129                                  section .text
   130 0000008B 55                      push rbp
   131 0000008C 4889E5                  mov rbp, rsp
   132                                  
   133                                      ; В rdi адрес фигуры
   134                                      ; PrintStr2 "toreall:", [stdout]
   135 0000008F 8B07                        mov eax, [rdi]
   136 00000091 3B0425[00000000]            cmp eax, [COMPLEXNUMBER]
   137 00000098 741A                        je compToReal
   138 0000009A 3B0425[00000000]            cmp eax, [FRACTION]
   139 000000A1 741C                        je fracToReal
   140 000000A3 3B0425[00000000]            cmp eax, [COORDINATES]
   141 000000AA 741E                        je cordToReal
   142 000000AC 31C0                        xor eax, eax
   143 000000AE F20F2AC0                    cvtsi2sd    xmm0, eax
   144 000000B2 EB21                        jmp     return
   145                                  compToReal:
   146                                      ; Вычисление периметра прямоугольника
   147                                      ;  PrintStr2 "complex:", stdout
   148 000000B4 4883C704                    add     rdi, 4
   149 000000B8 E863FFFFFF                  call    ToRealComplexNumber
   150 000000BD EB16                        jmp     return
   151                                  fracToReal:
   152                                      ; PrintStr2 "fraction:", stdout
   153                                      ; Вычисление периметра прямоугольника
   154 000000BF 4883C704                    add     rdi, 4
   155 000000C3 E891FFFFFF                  call    ToRealFraction
   156 000000C8 EB0B                        jmp     return
   157                                  cordToReal:
   158                                      ; PrintStr2 "coordinates:", stdout
   159                                      ; Вычисление периметра прямоугольника
   160 000000CA 4883C704                    add     rdi, 4
   161 000000CE E8A1FFFFFF                  call    ToRealCoordinates
   162 000000D3 EB00                        jmp     return
   163                                  
   164                                  return:
   165 000000D5 C9                      leave
   166 000000D6 C3                      ret
   167                                  
   168                                  ;----------------------------------------------
   169                                  ;// Вычисление суммы периметров всех фигур в контейнере
   170                                  ;double PerimeterSumContainer(void *c, int len) {
   171                                  ;    double sum = 0.0;
   172                                  ;    void *tmp = c;
   173                                  ;    for(int i = 0; i < len; i++) {
   174                                  ;        sum += PerimeterShape(tmp);
   175                                  ;        tmp = tmp + shapeSize;
   176                                  ;    }
   177                                  ;    return sum;
   178                                  ;}
   179                                  global PerimeterSumContainer
   180                                  PerimeterSumContainer:
   181                                  section .data
   182 00000004 0000000000000000            .sum    dq  0.0
   183                                  section .text
   184 000000D7 55                      push rbp
   185 000000D8 4889E5                  mov rbp, rsp
   186                                  
   187                                      ; В rdi адрес начала контейнера
   188 000000DB 89F3                        mov ebx, esi            ; число фигур
   189 000000DD 31C9                        xor ecx, ecx            ; счетчик фигур
   190 000000DF F20F100C25-                 movsd xmm1, [.sum]      ; перенос накопителя суммы в регистр 1
   190 000000E4 [04000000]         
   191                                  .loop:
   192 000000E8 39D9                        cmp ecx, ebx            ; проверка на окончание цикла
   193 000000EA 7D18                        jge .return             ; Перебрали все фигуры
   194                                  
   195 000000EC 4989FA                      mov r10, rdi            ; сохранение начала фигуры
   196 000000EF E897FFFFFF                  call ToRealNumber     ; Получение периметра первой фигуры
   197 000000F4 F20F58C8                    addsd xmm1, xmm0        ; накопление суммы
   198 000000F8 48FFC1                      inc rcx                 ; индекс следующей фигуры
   199 000000FB 4983C210                    add r10, 16             ; адрес следующей фигуры
   200 000000FF 4C89D7                      mov rdi, r10            ; восстановление для передачи параметра
   201 00000102 EBE4                        jmp .loop
   202                                  .return:
   203 00000104 F20F10C1                    movsd xmm0, xmm1
   204 00000108 C9                      leave
   205 00000109 C3                      ret
