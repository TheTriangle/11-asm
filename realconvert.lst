     1                                  ;------------------------------------------------------------------------------
     2                                  ; perimeter.asm - единица компиляции, вбирающая функции вычисления периметра
     3                                  ;------------------------------------------------------------------------------
     4                                  %include "printmacros.mac"
     1                              <1> extern  fprintf
     2                              <1> extern  OutContainer
     3                              <1> 
     4                              <1> ;-------------------------------------------------------------
     5                              <1> ; Вывод строки, передаваемой непосредственно макросу
     6                              <1> ; с переводом на следующую строку
     7                              <1> %macro  PrintStr2    2
     8                              <1>     section .data
     9                              <1>         %%arg1  db  %1,10,0     ; first argument
    10                              <1>     section .text               ; the printf arguments
    11                              <1>         push rdi
    12                              <1>         push rsi
    13                              <1>         push rax
    14                              <1>         mov rdi, %2
    15                              <1>         mov rsi, %%arg1
    16                              <1>         mov rax, 0              ; no floating point
    17                              <1>         call fprintf
    18                              <1>         pop rdi
    19                              <1>         pop rsi
    20                              <1>         pop rax
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> ; Вывод содержимого контейнера
    24                              <1> %macro  PrintContainer2    3
    25                              <1>     mov     rdi, %1
    26                              <1>     mov     esi, %2
    27                              <1>     mov     rdx, %3
    28                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
    29                              <1>     call    OutContainer
    30                              <1> %endmacro
    31                              <1> 
    32                              <1> %macro  PrintInt2    2
    33                              <1>     section .data
    34                              <1>         %%arg1  db  "%d ",10,0     ; first argument
    35                              <1>     section .text               ; the printf arguments
    36                              <1>         mov rdi, %2
    37                              <1>         mov rsi, %%arg1
    38                              <1>         mov rdx, %1
    39                              <1>         mov rax, 0              ; no floating point
    40                              <1>         call fprintf
    41                              <1> %endmacro
    42                              <1> 
    43                              <1> %macro  PrintDouble2    2
    44                              <1>     section .data
    45                              <1>         %%arg1  db  "%g",0     ; first argument
    46                              <1>     section .text               ; the printf arguments
    47                              <1>         mov rdi, %2
    48                              <1>         mov rsi, %%arg1
    49                              <1>         movsd xmm0, %1
    50                              <1>         mov rax, 1              ; no floating point
    51                              <1>         call fprintf
    52                              <1> %endmacro
     5                                  extern COMPLEXNUMBER
     6                                  extern FRACTION
     7                                  extern COORDINATES
     8                                  extern stdout 
     9                                  
    10                                  
    11                                  global sqrti
    12                                  sqrti:
    13 00000000 4C89CB                      mov rbx, r9
    14 00000003 4831C0                      xor rax, rax
    15                                  
    16                                      .while:
    17 00000006 4839D8                      cmp rax, rbx
    18 00000009 7311                        jnb .endwhile
    19                                  
    20 0000000B 4801C3                      add rbx, rax
    21 0000000E 48D1EB                      shr rbx, 1
    22                                  
    23 00000011 4C89C8                      mov rax, r9
    24 00000014 4831D2                      xor rdx, rdx
    25 00000017 48F7F3                      div rbx
    26                                  
    27 0000001A EBEA                        jmp .while
    28                                  
    29                                      .endwhile:
    30 0000001C 4889D8                      mov rax, rbx
    31 0000001F C3                          ret
    32                                  
    33                                  
    34                                  global ToRealComplexNumber
    35                                  ToRealComplexNumber:
    36                                  section .data
    37 00000000 19000000                X dd 25
    38                                  section .text
    39 00000020 55                      push rbp
    40 00000021 4889E5                  mov rbp, rsp
    41                                  
    42                                      ; В rdi адрес 
    43 00000024 4831C0                      xor rax, rax
    44 00000027 8B07                        mov eax, [rdi]
    45 00000029 8B5F04                      mov ebx, [rdi+4]
    46 0000002C 0FAFC0                      imul eax, eax
    47 0000002F 0FAFDB                      imul ebx, ebx
    48 00000032 01D8                        add eax, ebx 
    49 00000034 BB02000000                  mov ebx, 2 ; TODO take square root
    50 00000039 F7F3                        div ebx
    51                                  breakpoint:
    52 0000003B 4D31C9                      xor r9, r9
    53 0000003E 4189C1                      mov r9d, eax
    54 00000041 E8BAFFFFFF                  call sqrti
    55 00000046 4889D8                      mov rax, rbx
    56                                      
    57                                      ;call sqrti
    58 00000049 F20F2AC0                    cvtsi2sd    xmm0, eax
    59                                      
    60 0000004D 4883C708                    add rdi, 8
    61 00000051 8907                        mov dword[rdi], eax
    62 00000053 4883EF08                    sub rdi, 8
    63                                  
    64 00000057 C9                      leave
    65 00000058 C3                      ret
    66                                  
    67                                  
    68                                  global ToRealFraction
    69                                  ToRealFraction:
    70                                  section .text
    71 00000059 55                      push rbp
    72 0000005A 4889E5                  mov rbp, rsp
    73                                  
    74                                      ; В rdi адрес 
    75 0000005D 8B07                        mov eax, [rdi]
    76 0000005F 8B5F04                      mov ebx, [rdi+4]
    77                                      
    78 00000062 83FB00                      cmp ebx, 0
    79 00000065 7402                        je zerodenom
    80 00000067 F7F3                        div ebx
    81                                  
    82                                      zerodenom:
    83                                  
    84                                      ; mov eax, [rdi+4]
    85 00000069 F20F2AC0                    cvtsi2sd    xmm0, eax
    86 0000006D 4883C708                    add rdi, 8
    87 00000071 8907                        mov dword[rdi], eax
    88 00000073 4883EF08                    sub rdi, 8
    89                                      
    90 00000077 C9                      leave
    91 00000078 C3                      ret
    92                                  
    93                                  global ToRealCoordinates
    94                                  ToRealCoordinates:
    95                                  section .text
    96 00000079 55                      push rbp
    97 0000007A 4889E5                  mov rbp, rsp
    98                                  
    99                                      ; В rdi адрес 
   100 0000007D 8B4704                      mov eax, [rdi+4]
   101 00000080 F20F2AC0                    cvtsi2sd    xmm0, eax
   102 00000084 4883C708                    add rdi, 8
   103 00000088 8907                        mov dword[rdi], eax
   104 0000008A 4883EF08                    sub rdi, 8
   105                                  
   106 0000008E C9                      leave
   107 0000008F C3                      ret
   108                                  
   109                                  
   110                                  global ToRealNumber
   111                                  ToRealNumber:
   112                                  section .text
   113 00000090 55                      push rbp
   114 00000091 4889E5                  mov rbp, rsp
   115                                  
   116                                      ; В rdi адрес 
   117                                      ; PrintStr2 "toreall:", [stdout]
   118 00000094 8B07                        mov eax, [rdi]
   119 00000096 3B0425[00000000]            cmp eax, [COMPLEXNUMBER]
   120 0000009D 741A                        je compToReal
   121 0000009F 3B0425[00000000]            cmp eax, [FRACTION]
   122 000000A6 741C                        je fracToReal
   123 000000A8 3B0425[00000000]            cmp eax, [COORDINATES]
   124 000000AF 741E                        je cordToReal
   125 000000B1 31C0                        xor eax, eax
   126 000000B3 F20F2AC0                    cvtsi2sd    xmm0, eax
   127 000000B7 EB21                        jmp     return
   128                                  compToReal:
   129                                      ;  PrintStr2 "complex:", stdout
   130 000000B9 4883C704                    add     rdi, 4
   131 000000BD E85EFFFFFF                  call    ToRealComplexNumber
   132 000000C2 EB16                        jmp     return
   133                                  fracToReal:
   134                                      ; PrintStr2 "fraction:", stdout
   135 000000C4 4883C704                    add     rdi, 4
   136 000000C8 E88CFFFFFF                  call    ToRealFraction
   137 000000CD EB0B                        jmp     return
   138                                  cordToReal:
   139                                      ; PrintStr2 "coordinates:", stdout
   140 000000CF 4883C704                    add     rdi, 4
   141 000000D3 E8A1FFFFFF                  call    ToRealCoordinates
   142 000000D8 EB00                        jmp     return
   143                                  
   144                                  return:
   145 000000DA C9                      leave
   146 000000DB C3                      ret
