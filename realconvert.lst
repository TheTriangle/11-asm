     1                                  ;------------------------------------------------------------------------------
     2                                  ; perimeter.asm - единица компиляции, вбирающая функции вычисления периметра
     3                                  ;------------------------------------------------------------------------------
     4                                  
     5                                  extern COMPLEXNUMBER
     6                                  extern FRACTION
     7                                  extern COORDINATES
     8                                  
     9                                  ;----------------------------------------------
    10                                  ; Вычисление периметра прямоугольника
    11                                  ;double PerimeterRectangle(void *r) {
    12                                  ;    return 2.0 * (*((int*)r)
    13                                  ;           + *((int*)(r+intSize)));
    14                                  ;}
    15                                  global ToRealComplexNumber
    16                                  ToRealComplexNumber:
    17                                  section .text
    18 00000000 55                      push rbp
    19 00000001 4889E5                  mov rbp, rsp
    20                                  
    21                                      ; В rdi адрес прямоугольника
    22 00000004 8B07                        mov eax, [rdi]
    23 00000006 035F04                      add ebx, [rdi+4]
    24 00000009 0FAFC0                      imul eax, eax
    25 0000000C 0FAFDB                      imul ebx, ebx
    26 0000000F 01D8                        add eax, ebx 
    27 00000011 BB02000000                  mov ebx, 2 ; TODO take square root
    28 00000016 F7F3                        div ebx
    29 00000018 F20F2AC0                    cvtsi2sd    xmm0, eax
    30                                  
    31 0000001C C9                      leave
    32 0000001D C3                      ret
    33                                  
    34                                  ;----------------------------------------------
    35                                  ; double PerimeterTriangle(void *t) {
    36                                  ;    return (double)(*((int*)t)
    37                                  ;       + *((int*)(t+intSize))
    38                                  ;       + *((int*)(t+2*intSize)));
    39                                  ;}
    40                                  global ToRealFraction
    41                                  ToRealFraction:
    42                                  section .text
    43 0000001E 55                      push rbp
    44 0000001F 4889E5                  mov rbp, rsp
    45                                  
    46                                      ; В rdi адрес треугольника
    47 00000022 8B07                        mov eax, [rdi]
    48 00000024 8B5F04                      mov ebx, [rdi+4]
    49 00000027 F7F3                        div ebx
    50 00000029 F20F2AC0                    cvtsi2sd    xmm0, eax
    51                                  
    52 0000002D C9                      leave
    53 0000002E C3                      ret
    54                                  
    55                                  global ToRealCoordinates
    56                                  ToRealCoordinates:
    57                                  section .text
    58 0000002F 55                      push rbp
    59 00000030 4889E5                  mov rbp, rsp
    60                                  
    61                                      ; В rdi адрес треугольника
    62 00000033 8B4704                      mov eax, [rdi+4]
    63 00000036 F20F2AC0                    cvtsi2sd    xmm0, eax
    64                                  
    65 0000003A C9                      leave
    66 0000003B C3                      ret
    67                                  ;----------------------------------------------
    68                                  ; Вычисление периметра фигуры
    69                                  ;double PerimeterShape(void *s) {
    70                                  ;    int k = *((int*)s);
    71                                  ;    if(k == RECTANGLE) {
    72                                  ;        return PerimeterRectangle(s+intSize);
    73                                  ;    }
    74                                  ;    else if(k == TRIANGLE) {
    75                                  ;        return PerimeterTriangle(s+intSize);
    76                                  ;    }
    77                                  ;    else {
    78                                  ;        return 0.0;
    79                                  ;    }
    80                                  ;}
    81                                  global ToRealNumber
    82                                  ToRealNumber:
    83                                  section .text
    84 0000003C 55                      push rbp
    85 0000003D 4889E5                  mov rbp, rsp
    86                                  
    87                                      ; В rdi адрес фигуры
    88 00000040 8B07                        mov eax, [rdi]
    89 00000042 3B0425[00000000]            cmp eax, [COMPLEXNUMBER]
    90 00000049 741A                        je compToReal
    91 0000004B 3B0425[00000000]            cmp eax, [FRACTION]
    92 00000052 741C                        je fracToReal
    93 00000054 3B0425[00000000]            cmp eax, [COORDINATES]
    94 0000005B 741E                        je cordToReal
    95 0000005D 31C0                        xor eax, eax
    96 0000005F F20F2AC0                    cvtsi2sd    xmm0, eax
    97 00000063 EB21                        jmp     return
    98                                  compToReal:
    99                                      ; Вычисление периметра прямоугольника
   100 00000065 4883C704                    add     rdi, 4
   101 00000069 E892FFFFFF                  call    ToRealComplexNumber
   102 0000006E EB16                        jmp     return
   103                                  fracToReal:
   104                                      ; Вычисление периметра прямоугольника
   105 00000070 4883C704                    add     rdi, 4
   106 00000074 E8A5FFFFFF                  call    ToRealFraction
   107 00000079 EB0B                        jmp     return
   108                                  cordToReal:
   109                                      ; Вычисление периметра прямоугольника
   110 0000007B 4883C704                    add     rdi, 4
   111 0000007F E8ABFFFFFF                  call    ToRealCoordinates
   112 00000084 EB00                        jmp     return
   113                                  
   114                                  return:
   115 00000086 C9                      leave
   116 00000087 C3                      ret
   117                                  
   118                                  ;----------------------------------------------
   119                                  ;// Вычисление суммы периметров всех фигур в контейнере
   120                                  ;double PerimeterSumContainer(void *c, int len) {
   121                                  ;    double sum = 0.0;
   122                                  ;    void *tmp = c;
   123                                  ;    for(int i = 0; i < len; i++) {
   124                                  ;        sum += PerimeterShape(tmp);
   125                                  ;        tmp = tmp + shapeSize;
   126                                  ;    }
   127                                  ;    return sum;
   128                                  ;}
   129                                  global PerimeterSumContainer
   130                                  PerimeterSumContainer:
   131                                  section .data
   132 00000000 0000000000000000            .sum    dq  0.0
   133                                  section .text
   134 00000088 55                      push rbp
   135 00000089 4889E5                  mov rbp, rsp
   136                                  
   137                                      ; В rdi адрес начала контейнера
   138 0000008C 89F3                        mov ebx, esi            ; число фигур
   139 0000008E 31C9                        xor ecx, ecx            ; счетчик фигур
   140 00000090 F20F100C25-                 movsd xmm1, [.sum]      ; перенос накопителя суммы в регистр 1
   140 00000095 [00000000]         
   141                                  .loop:
   142 00000099 39D9                        cmp ecx, ebx            ; проверка на окончание цикла
   143 0000009B 7D18                        jge .return             ; Перебрали все фигуры
   144                                  
   145 0000009D 4989FA                      mov r10, rdi            ; сохранение начала фигуры
   146 000000A0 E897FFFFFF                  call ToRealNumber     ; Получение периметра первой фигуры
   147 000000A5 F20F58C8                    addsd xmm1, xmm0        ; накопление суммы
   148 000000A9 48FFC1                      inc rcx                 ; индекс следующей фигуры
   149 000000AC 4983C210                    add r10, 16             ; адрес следующей фигуры
   150 000000B0 4C89D7                      mov rdi, r10            ; восстановление для передачи параметра
   151 000000B3 EBE4                        jmp .loop
   152                                  .return:
   153 000000B5 F20F10C1                    movsd xmm0, xmm1
   154 000000B9 C9                      leave
   155 000000BA C3                      ret
