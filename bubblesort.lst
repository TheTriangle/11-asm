     1                                  extern ToRealNumber
     2                                  extern stdout
     3                                  extern OutNumber
     4                                  extern OutComplexNumber
     5                                  extern ToRealComplexNumber
     6                                  %include "printmacros.mac" 
     1                              <1> extern  fprintf
     2                              <1> extern  OutContainer
     3                              <1> 
     4                              <1> ;-------------------------------------------------------------
     5                              <1> ; Вывод строки, передаваемой непосредственно макросу
     6                              <1> ; с переводом на следующую строку
     7                              <1> %macro  PrintStr2    2
     8                              <1>     section .data
     9                              <1>         %%arg1  db  %1,10,0     ; first argument
    10                              <1>     section .text               ; the printf arguments
    11                              <1>         push rdi
    12                              <1>         push rsi
    13                              <1>         push rax
    14                              <1>         mov rdi, %2
    15                              <1>         mov rsi, %%arg1
    16                              <1>         mov rax, 0              ; no floating point
    17                              <1>         call fprintf
    18                              <1>         pop rdi
    19                              <1>         pop rsi
    20                              <1>         pop rax
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> ; Вывод содержимого контейнера
    24                              <1> %macro  PrintContainer2    3
    25                              <1>     mov     rdi, %1
    26                              <1>     mov     esi, %2
    27                              <1>     mov     rdx, %3
    28                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
    29                              <1>     call    OutContainer
    30                              <1> %endmacro
    31                              <1> 
    32                              <1> %macro  PrintInt2    2
    33                              <1>     section .data
    34                              <1>         %%arg1  db  "%d ",10,0     ; first argument
    35                              <1>     section .text               ; the printf arguments
    36                              <1>         mov rdi, %2
    37                              <1>         mov rsi, %%arg1
    38                              <1>         mov rdx, %1
    39                              <1>         mov rax, 0              ; no floating point
    40                              <1>         call fprintf
    41                              <1> %endmacro
    42                              <1> 
    43                              <1> %macro  PrintDouble2    2
    44                              <1>     section .data
    45                              <1>         %%arg1  db  "%g",0     ; first argument
    46                              <1>     section .text               ; the printf arguments
    47                              <1>         mov rdi, %2
    48                              <1>         mov rsi, %%arg1
    49                              <1>         movsd xmm0, %1
    50                              <1>         mov rax, 1              ; no floating point
    51                              <1>         call fprintf
    52                              <1> %endmacro
     7                                  ; макросы для отладки
     8                                  
     9                                  ; вызывается макросом SortContainer2 (macros.mac) из main.asm
    10                                  global BubbleSortContainer2
    11                                  BubbleSortContainer2:
    12                                  section .data
    13 00000000 25643A2000                  numFmt  db  "%d: ",0
    14 00000005 0000000000000000            real1 dq 0.0
    15 0000000D 436F6F72696E617465-         outfmt db "Coorinates (%d, %d) - %g",10,0
    15 00000016 73202825642C202564-
    15 0000001F 29202D2025670A00   
    16                                  section .bss
    17 00000000 <res 00000008>              pcont  resq    1   ; адрес контейнера
    18 00000008 <res 00000004>              len    resd    1   ; адрес для сохранения числа введенных элементов
    19 0000000C <res 00000008>              FILE   resq    1   ; указатель на файл (поток)
    20 00000014 <res 00000004>              cntr   resd    1   ; вспомогательный счетчик
    21 00000018 <res 00000004>              cntr2   resd    1   ; вспомогательный счетчик
    22 0000001C <res 00000004>              lptr    resd    1   ; вспомогательный счетчик
    23 00000020 <res 00000004>              i: resd 1
    24 00000024 <res 00000004>              j: resd 1
    25                                  
    26                                  section .text
    27 00000000 55                      push rbp
    28 00000001 4889E5                  mov rbp, rsp
    29                                  
    30 00000004 48893C25[00000000]          mov [pcont], rdi   ; сохраняется указатель на контейнер
    31                                      ; PrintInt2 rdi, [stdout]
    32                                      
    33 0000000C 893425[08000000]            mov [len],   esi     ; сохраняется число элементов
    34 00000013 48891425[0C000000]          mov [FILE],  rdx    ; сохраняется указатель на файл (поток)
    35                                  	;mov cl, [len]					;set cl with array length
    36                                  	;mov [cntr], cl					;set this variable with array length
    37                                      ;mov rbx, rsi            ; число фигур
    38                                      ;xor ecx, ecx            ; счетчик фигур = 0
    39                                      ;mov rsi, rdx            ; перенос указателя на файл
    40                                  
    41                                      ;mov dword[rdi], 2
    42                                      ;sub rdi, 16
    43                                      ;PrintStr2 "hey, Jude", [FILE]
    44                                  
    45                                      ;xor     edx, edx    
    46                                      ; mov [pcont], [rdi + 16]     
    47                                      ;mov     rdi, [pcont]
    48                                      ;mov     rsi, [FILE]
    49                                      ;call OutNumber     ; Получение периметра первой фигуры
    50                                  
    51                                      ;mov rdi, [pcont]
    52                                      ;call ToRealNumber     ; Получение периметра первой фигуры
    53                                      ;movsd [real], xmm0
    54                                  
    55                                      ;mov rdi, [pcont]
    56                                      ;mov [pcont], rdi
    57                                      ;PrintStr2 "don't make it bad", [FILE]
    58                                  
    59                                      ;mov     rdi, [FILE]
    60                                      ;mov     rsi, outfmt        ; Формат - 2-й аргумент
    61                                      ;mov     rax, [pcont]        ; адрес прямоугольника
    62                                      ;mov     edx, [rax+4]          ; x
    63                                      ;mov     ecx, [rax+8]        ; y
    64                                      ;movsd   xmm0, [real]
    65                                      ;mov     rax, 1              ; есть числа с плавающей точкой
    66                                      ;call    fprintf
    67                                      ;PrintStr2 "take a sad song", [FILE]
    68                                  
    69                                      ; здесь начинается скопипащенный алгоритм сортировки, который я так и не проверил
    70                                      
    71                                      ; PrintStr2 "and make it better", [FILE]  
    72                                     
    73                                      ; movzx ecx, byte[len]
    74 0000001B BB[00000000]                mov ebx, pcont
    75                                  
    76 00000020 C70425[20000000]00-         mov dword[i], 0
    76 00000028 000000             
    77                                      i_loop:
    78                                      ; PrintStr2 "remember", [FILE]
    79 0000002B C70425[24000000]00-         mov dword[j], 0
    79 00000033 000000             
    80                                      j_loop:
    81 00000036 8B1C25[00000000]                mov ebx, [pcont] ; ebx - указатель на начало контейнера
    82 0000003D 8B0425[24000000]                mov eax, dword[j] ; eax - j
    83 00000044 41BB10000000                    mov r11d, 16 ; r11d - 16
    84 0000004A 41F7E3                          mul r11d ; eax - 16j
    85 0000004D 01C3                            add ebx, eax ; ebx - указатель на j-тый элемент контейнера 
    86 0000004F 89D8                            mov eax, ebx ; eax - указатель на j-тый элемент контейнера
    87 00000051 83C010                          add eax, 16 ; eax - указатель на j+1-ый элемент контейнера
    88 00000054 678B13                          mov edx, dword[ebx] ; edx - j-тый элемент контейнера (тип числа)
    89 00000057 67448B08                        mov r9d, dword[eax] ; r9d - j+1-ый элемент контейнера (тип числа)
    90 0000005B 4139D1                          cmp r9d, edx ; сравниваем j и j+1 типы
    91 0000005E 7C02                            jl swap ; свопаем
    92 00000060 EB2F                            jmp no_swap ; не свопаем
    93                                      
    94                                          swap:
    95 00000062 6744890B                        mov dword[ebx], r9d ; помещаем j+1-ый элемент по указателю на j
    96 00000066 678910                          mov dword[eax], edx ; помещаем j-ый элемент по указателю на j+1-ый
    97 00000069 83C304                          add ebx, 4
    98 0000006C 83C004                          add eax, 4
    99 0000006F 67448B08                        mov r9d, dword[eax]
   100 00000073 678B13                          mov edx, dword[ebx]
   101 00000076 6744890B                        mov dword[ebx], r9d ; помещаем j+1-ый элемент по указателю на j
   102 0000007A 678910                          mov dword[eax], edx ; помещаем j-ый элемент по указателю на j+1-ый
   103 0000007D 83C304                          add ebx, 4
   104 00000080 83C004                          add eax, 4
   105 00000083 67448B08                        mov r9d, dword[eax]
   106 00000087 678B13                          mov edx, dword[ebx]
   107 0000008A 6744890B                        mov dword[ebx], r9d ; помещаем j+1-ый элемент по указателю на j
   108 0000008E 678910                          mov dword[eax], edx ; помещаем j-ый элемент по указателю на j+1-ый
   109                                  
   110                                  
   111                                      no_swap:
   112 00000091 FF0425[24000000]                inc dword[j] ; увеличиваем j
   113 00000098 448B1425[08000000]              mov r10d, dword[len] ; r10d - длина массива
   114 000000A0 442B1425[20000000]              sub r10d, dword[i] ; r10d - длина массива - i
   115 000000A8 4183EA01                        sub r10d, 1 ; r10d - длина массива - i - 1
   116 000000AC 44391425[24000000]              cmp dword[j], r10d ; если j < длины - i - 1, продолжаем
   117 000000B4 7C80                            jl j_loop
   118                                  
   119 000000B6 FF0425[20000000]            inc dword[i] ; увеличиваем i
   120 000000BD 448B1425[08000000]          mov r10d, dword[len] ; r10d - длина массива
   121 000000C5 44391425[20000000]          cmp dword[i], r10d
   122 000000CD 0F8C58FFFFFF                jl i_loop
   123                                  
   124 000000D3 C9                          leave
   125 000000D4 C3                      	ret
