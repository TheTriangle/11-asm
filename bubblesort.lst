     1                                  global BubbleSortContainer
     2                                  BubbleSortContainer:
     3                                  section .data
     4 00000000 25643A2000                  numFmt  db  "%d: ",0
     5                                  section .bss
     6 00000000 <res 00000008>              pcont  resq    1   ; адрес контейнера
     7 00000008 <res 00000004>              len    resd    1   ; адрес для сохранения числа введенных элементов
     8 0000000C <res 00000008>              FILE   resq    1   ; указатель на файл
     9 00000014 <res 00000004>              cntr   resd    1   ; вспомогательный счетчик
    10 00000018 <res 00000004>              cntr2   resd    1   ; вспомогательный счетчик
    11 0000001C <res 00000004>              lptr    resd    1   ; вспомогательный счетчик
    12                                  
    13                                  section .text
    14 00000000 55                      push rbp
    15 00000001 4889E5                  mov rbp, rsp
    16                                  
    17 00000004 48893C25[00000000]          mov [pcont], rdi   ; сохраняется указатель на контейнер
    18 0000000C 893425[08000000]            mov [len],   esi     ; сохраняется число элементов
    19 00000013 48891425[0C000000]          mov [FILE],  rdx    ; сохраняется указатель на файл
    20 0000001B 8A0C25[08000000]        	mov cl, [len]					;set cl with array length
    21 00000022 880C25[14000000]        	mov [cntr], cl					;set this variable with array length
    22                                  
    23                                      up1 :
    24 00000029 488B3C25[00000000]      	mov rdi, [pcont]						;Points to start
    25 00000031 8A0425[14000000]        	mov al, [cntr]					;
    26 00000038 8A1C25[1C000000]        	mov bl, [lptr]
    27 0000003F 28D8                    	sub al, bl						; n-i (Rather to increase i, Decrements n)
    28 00000041 880425[18000000]        	mov [cntr2], al					; j pointer in bubble sort
    29                                  	up2:
    30 00000048 8A07                    		mov al, [rdi]				;Get [j] in al
    31 0000004A 8A5F01                  		mov bl, [rdi+1]			;Get [j+1]in bl
    32 0000004D 38D8                    		cmp al, bl
    33 0000004F 7205                    		jb skip						;Compares
    34 00000051 884701                  		mov [rdi+1], al					;If larger swapped
    35 00000054 881F                    		mov [rdi], bl
    36                                  		skip:
    37 00000056 4883C701                		   add rdi, 1				;Else continues to next number
    38 0000005A 48832C25[18000000]-     		   sub qword[cntr2], 1
    38 00000062 01                 
    39 00000063 75E3                    		   jnz up2
    40                                  			
    41 00000065 48832C25[14000000]-     	sub qword[cntr], 1						;Decrements n (Rather to increase i)
    41 0000006D 01                 
    42 0000006E 75B9                    	jnz up1
    43 00000070 C3                      	ret
    44 00000071 C9                      leave
    45 00000072 C3                      ret
