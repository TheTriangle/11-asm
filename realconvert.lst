     1                                  ;------------------------------------------------------------------------------
     2                                  ; perimeter.asm - единица компиляции, вбирающая функции вычисления периметра
     3                                  ;------------------------------------------------------------------------------
     4                                  %include "printmacros.mac"
     1                              <1> extern  fprintf
     2                              <1> extern  OutContainer
     3                              <1> 
     4                              <1> ;-------------------------------------------------------------
     5                              <1> ; Вывод строки, передаваемой непосредственно макросу
     6                              <1> ; с переводом на следующую строку
     7                              <1> %macro  PrintStr2    2
     8                              <1>     section .data
     9                              <1>         %%arg1  db  %1,10,0     ; first argument
    10                              <1>     section .text               ; the printf arguments
    11                              <1>         push rdi
    12                              <1>         push rsi
    13                              <1>         push rax
    14                              <1>         mov rdi, %2
    15                              <1>         mov rsi, %%arg1
    16                              <1>         mov rax, 0              ; no floating point
    17                              <1>         call fprintf
    18                              <1>         pop rdi
    19                              <1>         pop rsi
    20                              <1>         pop rax
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> ; Вывод содержимого контейнера
    24                              <1> %macro  PrintContainer2    3
    25                              <1>     mov     rdi, %1
    26                              <1>     mov     esi, %2
    27                              <1>     mov     rdx, %3
    28                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
    29                              <1>     call    OutContainer
    30                              <1> %endmacro
    31                              <1> 
    32                              <1> %macro  PrintInt2    2
    33                              <1>     section .data
    34                              <1>         %%arg1  db  "%d ",10,0     ; first argument
    35                              <1>     section .text               ; the printf arguments
    36                              <1>         mov rdi, %2
    37                              <1>         mov rsi, %%arg1
    38                              <1>         mov rdx, %1
    39                              <1>         mov rax, 0              ; no floating point
    40                              <1>         call fprintf
    41                              <1> %endmacro
    42                              <1> 
    43                              <1> %macro  PrintDouble2    2
    44                              <1>     section .data
    45                              <1>         %%arg1  db  "%g",0     ; first argument
    46                              <1>     section .text               ; the printf arguments
    47                              <1>         mov rdi, %2
    48                              <1>         mov rsi, %%arg1
    49                              <1>         movsd xmm0, %1
    50                              <1>         mov rax, 1              ; no floating point
    51                              <1>         call fprintf
    52                              <1> %endmacro
     5                                  extern COMPLEXNUMBER
     6                                  extern FRACTION
     7                                  extern COORDINATES
     8                                  extern stdout 
     9                                  
    10                                  ;----------------------------------------------
    11                                  ; Вычисление периметра прямоугольника
    12                                  ;double PerimeterRectangle(void *r) {
    13                                  ;    return 2.0 * (*((int*)r)
    14                                  ;           + *((int*)(r+intSize)));
    15                                  ;}
    16                                  global ToRealComplexNumber
    17                                  ToRealComplexNumber:
    18                                  section .text
    19 00000000 55                      push rbp
    20 00000001 4889E5                  mov rbp, rsp
    21                                  
    22                                      ; В rdi адрес прямоугольника
    23 00000004 8B07                        mov eax, [rdi]
    24 00000006 8B5F04                      mov ebx, [rdi+4]
    25 00000009 0FAFC0                      imul eax, eax
    26 0000000C 0FAFDB                      imul ebx, ebx
    27 0000000F 01D8                        add eax, ebx 
    28 00000011 BB02000000                  mov ebx, 2 ; TODO take square root
    29 00000016 F7F3                        div ebx
    30 00000018 F20F2AC0                    cvtsi2sd    xmm0, eax
    31                                  
    32 0000001C C9                      leave
    33 0000001D C3                      ret
    34                                  
    35                                  ;----------------------------------------------
    36                                  ; double PerimeterTriangle(void *t) {
    37                                  ;    return (double)(*((int*)t)
    38                                  ;       + *((int*)(t+intSize))
    39                                  ;       + *((int*)(t+2*intSize)));
    40                                  ;}
    41                                  global ToRealFraction
    42                                  ToRealFraction:
    43                                  section .text
    44 0000001E 55                      push rbp
    45 0000001F 4889E5                  mov rbp, rsp
    46                                  
    47                                      ; В rdi адрес треугольника
    48 00000022 8B07                        mov eax, [rdi]
    49 00000024 8B5F04                      mov ebx, [rdi+4]
    50 00000027 F7F3                        div ebx
    51                                      ; mov eax, [rdi+4]
    52 00000029 F20F2AC0                    cvtsi2sd    xmm0, eax
    53                                      
    54 0000002D C9                      leave
    55 0000002E C3                      ret
    56                                  
    57                                  global ToRealCoordinates
    58                                  ToRealCoordinates:
    59                                  section .text
    60 0000002F 55                      push rbp
    61 00000030 4889E5                  mov rbp, rsp
    62                                  
    63                                      ; В rdi адрес треугольника
    64 00000033 8B4704                      mov eax, [rdi+4]
    65 00000036 F20F2AC0                    cvtsi2sd    xmm0, eax
    66                                  
    67 0000003A C9                      leave
    68 0000003B C3                      ret
    69                                  ;----------------------------------------------
    70                                  ; Вычисление периметра фигуры
    71                                  ;double PerimeterShape(void *s) {
    72                                  ;    int k = *((int*)s);
    73                                  ;    if(k == RECTANGLE) {
    74                                  ;        return PerimeterRectangle(s+intSize);
    75                                  ;    }
    76                                  ;    else if(k == TRIANGLE) {
    77                                  ;        return PerimeterTriangle(s+intSize);
    78                                  ;    }
    79                                  ;    else {
    80                                  ;        return 0.0;
    81                                  ;    }
    82                                  ;}
    83                                  global ToRealNumber
    84                                  ToRealNumber:
    85                                  section .text
    86 0000003C 55                      push rbp
    87 0000003D 4889E5                  mov rbp, rsp
    88                                  
    89                                      ; В rdi адрес фигуры
    90                                      ; PrintStr2 "toreall:", [stdout]
    91 00000040 8B07                        mov eax, [rdi]
    92 00000042 3B0425[00000000]            cmp eax, [COMPLEXNUMBER]
    93 00000049 741A                        je compToReal
    94 0000004B 3B0425[00000000]            cmp eax, [FRACTION]
    95 00000052 741C                        je fracToReal
    96 00000054 3B0425[00000000]            cmp eax, [COORDINATES]
    97 0000005B 741E                        je cordToReal
    98 0000005D 31C0                        xor eax, eax
    99 0000005F F20F2AC0                    cvtsi2sd    xmm0, eax
   100 00000063 EB21                        jmp     return
   101                                  compToReal:
   102                                      ; Вычисление периметра прямоугольника
   103                                      ;  PrintStr2 "complex:", stdout
   104 00000065 4883C704                    add     rdi, 4
   105 00000069 E892FFFFFF                  call    ToRealComplexNumber
   106 0000006E EB16                        jmp     return
   107                                  fracToReal:
   108                                      ; PrintStr2 "fraction:", stdout
   109                                      ; Вычисление периметра прямоугольника
   110 00000070 4883C704                    add     rdi, 4
   111 00000074 E8A5FFFFFF                  call    ToRealFraction
   112 00000079 EB0B                        jmp     return
   113                                  cordToReal:
   114                                      ; PrintStr2 "coordinates:", stdout
   115                                      ; Вычисление периметра прямоугольника
   116 0000007B 4883C704                    add     rdi, 4
   117 0000007F E8ABFFFFFF                  call    ToRealCoordinates
   118 00000084 EB00                        jmp     return
   119                                  
   120                                  return:
   121 00000086 C9                      leave
   122 00000087 C3                      ret
   123                                  
   124                                  ;----------------------------------------------
   125                                  ;// Вычисление суммы периметров всех фигур в контейнере
   126                                  ;double PerimeterSumContainer(void *c, int len) {
   127                                  ;    double sum = 0.0;
   128                                  ;    void *tmp = c;
   129                                  ;    for(int i = 0; i < len; i++) {
   130                                  ;        sum += PerimeterShape(tmp);
   131                                  ;        tmp = tmp + shapeSize;
   132                                  ;    }
   133                                  ;    return sum;
   134                                  ;}
   135                                  global PerimeterSumContainer
   136                                  PerimeterSumContainer:
   137                                  section .data
   138 00000000 0000000000000000            .sum    dq  0.0
   139                                  section .text
   140 00000088 55                      push rbp
   141 00000089 4889E5                  mov rbp, rsp
   142                                  
   143                                      ; В rdi адрес начала контейнера
   144 0000008C 89F3                        mov ebx, esi            ; число фигур
   145 0000008E 31C9                        xor ecx, ecx            ; счетчик фигур
   146 00000090 F20F100C25-                 movsd xmm1, [.sum]      ; перенос накопителя суммы в регистр 1
   146 00000095 [00000000]         
   147                                  .loop:
   148 00000099 39D9                        cmp ecx, ebx            ; проверка на окончание цикла
   149 0000009B 7D18                        jge .return             ; Перебрали все фигуры
   150                                  
   151 0000009D 4989FA                      mov r10, rdi            ; сохранение начала фигуры
   152 000000A0 E897FFFFFF                  call ToRealNumber     ; Получение периметра первой фигуры
   153 000000A5 F20F58C8                    addsd xmm1, xmm0        ; накопление суммы
   154 000000A9 48FFC1                      inc rcx                 ; индекс следующей фигуры
   155 000000AC 4983C210                    add r10, 16             ; адрес следующей фигуры
   156 000000B0 4C89D7                      mov rdi, r10            ; восстановление для передачи параметра
   157 000000B3 EBE4                        jmp .loop
   158                                  .return:
   159 000000B5 F20F10C1                    movsd xmm0, xmm1
   160 000000B9 C9                      leave
   161 000000BA C3                      ret
